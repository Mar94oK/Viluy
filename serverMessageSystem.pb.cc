// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serverMessageSystem.proto

#include "serverMessageSystem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_serverMessageSystem_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_serverMessageSystem_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameType;
}  // namespace protobuf_serverMessageSystem_2eproto
namespace serverMessageSystem {
class GameTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameType>
      _instance;
} _GameType_default_instance_;
class ClientEnteringRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientEnteringRequest>
      _instance;
} _ClientEnteringRequest_default_instance_;
}  // namespace serverMessageSystem
namespace protobuf_serverMessageSystem_2eproto {
static void InitDefaultsGameType() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serverMessageSystem::_GameType_default_instance_;
    new (ptr) ::serverMessageSystem::GameType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serverMessageSystem::GameType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameType =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameType}, {}};

static void InitDefaultsClientEnteringRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serverMessageSystem::_ClientEnteringRequest_default_instance_;
    new (ptr) ::serverMessageSystem::ClientEnteringRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serverMessageSystem::ClientEnteringRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ClientEnteringRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsClientEnteringRequest}, {
      &protobuf_serverMessageSystem_2eproto::scc_info_GameType.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GameType.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientEnteringRequest.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::GameType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::GameType, hasaddonwildaxe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::GameType, hasaddonclericalerrors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::GameType, rulestype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientEnteringRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientEnteringRequest, messageid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientEnteringRequest, clientname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientEnteringRequest, enteringrequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientEnteringRequest, gametype_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::serverMessageSystem::GameType)},
  { 8, -1, sizeof(::serverMessageSystem::ClientEnteringRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::serverMessageSystem::_GameType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serverMessageSystem::_ClientEnteringRequest_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "serverMessageSystem.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031serverMessageSystem.proto\022\023serverMessa"
      "geSystem\"v\n\010GameType\022\027\n\017hasAddonWildAxe\030"
      "\001 \001(\010\022\036\n\026hasAddonClericalErrors\030\002 \001(\010\0221\n"
      "\trulesType\030\003 \001(\0162\036.serverMessageSystem.R"
      "ulesType\"\262\001\n\025ClientEnteringRequest\022\021\n\tme"
      "ssageID\030\001 \001(\r\022\022\n\nclientName\030\002 \001(\t\022A\n\017ent"
      "eringRequest\030\003 \001(\0162(.serverMessageSystem"
      ".GameCreationRequest\022/\n\010gameType\030\004 \001(\0132\035"
      ".serverMessageSystem.GameType*&\n\tRulesTy"
      "pe\022\r\n\tAutomatic\020\000\022\n\n\006Manual\020\001*9\n\023GameCre"
      "ationRequest\022\017\n\013JoinTheGame\020\000\022\021\n\rCreateT"
      "heGame\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 456);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "serverMessageSystem.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_serverMessageSystem_2eproto
namespace serverMessageSystem {
const ::google::protobuf::EnumDescriptor* RulesType_descriptor() {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_serverMessageSystem_2eproto::file_level_enum_descriptors[0];
}
bool RulesType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GameCreationRequest_descriptor() {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_serverMessageSystem_2eproto::file_level_enum_descriptors[1];
}
bool GameCreationRequest_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GameType::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameType::kHasAddonWildAxeFieldNumber;
const int GameType::kHasAddonClericalErrorsFieldNumber;
const int GameType::kRulesTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameType::GameType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serverMessageSystem_2eproto::scc_info_GameType.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serverMessageSystem.GameType)
}
GameType::GameType(const GameType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hasaddonwildaxe_, &from.hasaddonwildaxe_,
    static_cast<size_t>(reinterpret_cast<char*>(&rulestype_) -
    reinterpret_cast<char*>(&hasaddonwildaxe_)) + sizeof(rulestype_));
  // @@protoc_insertion_point(copy_constructor:serverMessageSystem.GameType)
}

void GameType::SharedCtor() {
  ::memset(&hasaddonwildaxe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rulestype_) -
      reinterpret_cast<char*>(&hasaddonwildaxe_)) + sizeof(rulestype_));
}

GameType::~GameType() {
  // @@protoc_insertion_point(destructor:serverMessageSystem.GameType)
  SharedDtor();
}

void GameType::SharedDtor() {
}

void GameType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameType::descriptor() {
  ::protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameType& GameType::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_serverMessageSystem_2eproto::scc_info_GameType.base);
  return *internal_default_instance();
}


void GameType::Clear() {
// @@protoc_insertion_point(message_clear_start:serverMessageSystem.GameType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hasaddonwildaxe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rulestype_) -
      reinterpret_cast<char*>(&hasaddonwildaxe_)) + sizeof(rulestype_));
  _internal_metadata_.Clear();
}

bool GameType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serverMessageSystem.GameType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool hasAddonWildAxe = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasaddonwildaxe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hasAddonClericalErrors = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasaddonclericalerrors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .serverMessageSystem.RulesType rulesType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rulestype(static_cast< ::serverMessageSystem::RulesType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serverMessageSystem.GameType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serverMessageSystem.GameType)
  return false;
#undef DO_
}

void GameType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serverMessageSystem.GameType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool hasAddonWildAxe = 1;
  if (this->hasaddonwildaxe() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hasaddonwildaxe(), output);
  }

  // bool hasAddonClericalErrors = 2;
  if (this->hasaddonclericalerrors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hasaddonclericalerrors(), output);
  }

  // .serverMessageSystem.RulesType rulesType = 3;
  if (this->rulestype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->rulestype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:serverMessageSystem.GameType)
}

::google::protobuf::uint8* GameType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serverMessageSystem.GameType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool hasAddonWildAxe = 1;
  if (this->hasaddonwildaxe() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hasaddonwildaxe(), target);
  }

  // bool hasAddonClericalErrors = 2;
  if (this->hasaddonclericalerrors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hasaddonclericalerrors(), target);
  }

  // .serverMessageSystem.RulesType rulesType = 3;
  if (this->rulestype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->rulestype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverMessageSystem.GameType)
  return target;
}

size_t GameType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverMessageSystem.GameType)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool hasAddonWildAxe = 1;
  if (this->hasaddonwildaxe() != 0) {
    total_size += 1 + 1;
  }

  // bool hasAddonClericalErrors = 2;
  if (this->hasaddonclericalerrors() != 0) {
    total_size += 1 + 1;
  }

  // .serverMessageSystem.RulesType rulesType = 3;
  if (this->rulestype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rulestype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serverMessageSystem.GameType)
  GOOGLE_DCHECK_NE(&from, this);
  const GameType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serverMessageSystem.GameType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serverMessageSystem.GameType)
    MergeFrom(*source);
  }
}

void GameType::MergeFrom(const GameType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serverMessageSystem.GameType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hasaddonwildaxe() != 0) {
    set_hasaddonwildaxe(from.hasaddonwildaxe());
  }
  if (from.hasaddonclericalerrors() != 0) {
    set_hasaddonclericalerrors(from.hasaddonclericalerrors());
  }
  if (from.rulestype() != 0) {
    set_rulestype(from.rulestype());
  }
}

void GameType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serverMessageSystem.GameType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameType::CopyFrom(const GameType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverMessageSystem.GameType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameType::IsInitialized() const {
  return true;
}

void GameType::Swap(GameType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameType::InternalSwap(GameType* other) {
  using std::swap;
  swap(hasaddonwildaxe_, other->hasaddonwildaxe_);
  swap(hasaddonclericalerrors_, other->hasaddonclericalerrors_);
  swap(rulestype_, other->rulestype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameType::GetMetadata() const {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientEnteringRequest::InitAsDefaultInstance() {
  ::serverMessageSystem::_ClientEnteringRequest_default_instance_._instance.get_mutable()->gametype_ = const_cast< ::serverMessageSystem::GameType*>(
      ::serverMessageSystem::GameType::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientEnteringRequest::kMessageIDFieldNumber;
const int ClientEnteringRequest::kClientNameFieldNumber;
const int ClientEnteringRequest::kEnteringRequestFieldNumber;
const int ClientEnteringRequest::kGameTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientEnteringRequest::ClientEnteringRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serverMessageSystem_2eproto::scc_info_ClientEnteringRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serverMessageSystem.ClientEnteringRequest)
}
ClientEnteringRequest::ClientEnteringRequest(const ClientEnteringRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientname().size() > 0) {
    clientname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientname_);
  }
  if (from.has_gametype()) {
    gametype_ = new ::serverMessageSystem::GameType(*from.gametype_);
  } else {
    gametype_ = NULL;
  }
  ::memcpy(&messageid_, &from.messageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&enteringrequest_) -
    reinterpret_cast<char*>(&messageid_)) + sizeof(enteringrequest_));
  // @@protoc_insertion_point(copy_constructor:serverMessageSystem.ClientEnteringRequest)
}

void ClientEnteringRequest::SharedCtor() {
  clientname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gametype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enteringrequest_) -
      reinterpret_cast<char*>(&gametype_)) + sizeof(enteringrequest_));
}

ClientEnteringRequest::~ClientEnteringRequest() {
  // @@protoc_insertion_point(destructor:serverMessageSystem.ClientEnteringRequest)
  SharedDtor();
}

void ClientEnteringRequest::SharedDtor() {
  clientname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gametype_;
}

void ClientEnteringRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientEnteringRequest::descriptor() {
  ::protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientEnteringRequest& ClientEnteringRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_serverMessageSystem_2eproto::scc_info_ClientEnteringRequest.base);
  return *internal_default_instance();
}


void ClientEnteringRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:serverMessageSystem.ClientEnteringRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && gametype_ != NULL) {
    delete gametype_;
  }
  gametype_ = NULL;
  ::memset(&messageid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enteringrequest_) -
      reinterpret_cast<char*>(&messageid_)) + sizeof(enteringrequest_));
  _internal_metadata_.Clear();
}

bool ClientEnteringRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serverMessageSystem.ClientEnteringRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 messageID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string clientName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientname().data(), static_cast<int>(this->clientname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "serverMessageSystem.ClientEnteringRequest.clientName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .serverMessageSystem.GameCreationRequest enteringRequest = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_enteringrequest(static_cast< ::serverMessageSystem::GameCreationRequest >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .serverMessageSystem.GameType gameType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gametype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serverMessageSystem.ClientEnteringRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serverMessageSystem.ClientEnteringRequest)
  return false;
#undef DO_
}

void ClientEnteringRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serverMessageSystem.ClientEnteringRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 messageID = 1;
  if (this->messageid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->messageid(), output);
  }

  // string clientName = 2;
  if (this->clientname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientname().data(), static_cast<int>(this->clientname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.ClientEnteringRequest.clientName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientname(), output);
  }

  // .serverMessageSystem.GameCreationRequest enteringRequest = 3;
  if (this->enteringrequest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->enteringrequest(), output);
  }

  // .serverMessageSystem.GameType gameType = 4;
  if (this->has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_gametype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:serverMessageSystem.ClientEnteringRequest)
}

::google::protobuf::uint8* ClientEnteringRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serverMessageSystem.ClientEnteringRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 messageID = 1;
  if (this->messageid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->messageid(), target);
  }

  // string clientName = 2;
  if (this->clientname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientname().data(), static_cast<int>(this->clientname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.ClientEnteringRequest.clientName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientname(), target);
  }

  // .serverMessageSystem.GameCreationRequest enteringRequest = 3;
  if (this->enteringrequest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->enteringrequest(), target);
  }

  // .serverMessageSystem.GameType gameType = 4;
  if (this->has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_gametype(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverMessageSystem.ClientEnteringRequest)
  return target;
}

size_t ClientEnteringRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverMessageSystem.ClientEnteringRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string clientName = 2;
  if (this->clientname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientname());
  }

  // .serverMessageSystem.GameType gameType = 4;
  if (this->has_gametype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gametype_);
  }

  // uint32 messageID = 1;
  if (this->messageid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->messageid());
  }

  // .serverMessageSystem.GameCreationRequest enteringRequest = 3;
  if (this->enteringrequest() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enteringrequest());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientEnteringRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serverMessageSystem.ClientEnteringRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientEnteringRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientEnteringRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serverMessageSystem.ClientEnteringRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serverMessageSystem.ClientEnteringRequest)
    MergeFrom(*source);
  }
}

void ClientEnteringRequest::MergeFrom(const ClientEnteringRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serverMessageSystem.ClientEnteringRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientname().size() > 0) {

    clientname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientname_);
  }
  if (from.has_gametype()) {
    mutable_gametype()->::serverMessageSystem::GameType::MergeFrom(from.gametype());
  }
  if (from.messageid() != 0) {
    set_messageid(from.messageid());
  }
  if (from.enteringrequest() != 0) {
    set_enteringrequest(from.enteringrequest());
  }
}

void ClientEnteringRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serverMessageSystem.ClientEnteringRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientEnteringRequest::CopyFrom(const ClientEnteringRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverMessageSystem.ClientEnteringRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientEnteringRequest::IsInitialized() const {
  return true;
}

void ClientEnteringRequest::Swap(ClientEnteringRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientEnteringRequest::InternalSwap(ClientEnteringRequest* other) {
  using std::swap;
  clientname_.Swap(&other->clientname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gametype_, other->gametype_);
  swap(messageid_, other->messageid_);
  swap(enteringrequest_, other->enteringrequest_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientEnteringRequest::GetMetadata() const {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace serverMessageSystem
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serverMessageSystem::GameType* Arena::CreateMaybeMessage< ::serverMessageSystem::GameType >(Arena* arena) {
  return Arena::CreateInternal< ::serverMessageSystem::GameType >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serverMessageSystem::ClientEnteringRequest* Arena::CreateMaybeMessage< ::serverMessageSystem::ClientEnteringRequest >(Arena* arena) {
  return Arena::CreateInternal< ::serverMessageSystem::ClientEnteringRequest >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
