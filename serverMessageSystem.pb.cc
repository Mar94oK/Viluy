// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serverMessageSystem.proto

#include "serverMessageSystem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_serverMessageSystem_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_serverMessageSystem_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CommonHeader;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_serverMessageSystem_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CreatedRoom;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_serverMessageSystem_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameType;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_serverMessageSystem_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RoomCreationErrors;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_serverMessageSystem_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TimeSettings;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_serverMessageSystem_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_GameSettings;
}  // namespace protobuf_serverMessageSystem_2eproto
namespace serverMessageSystem {
class CommonHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommonHeader>
      _instance;
} _CommonHeader_default_instance_;
class TimeSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimeSettings>
      _instance;
} _TimeSettings_default_instance_;
class GameTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameType>
      _instance;
} _GameType_default_instance_;
class GameSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameSettings>
      _instance;
} _GameSettings_default_instance_;
class RoomCreationErrorsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoomCreationErrors>
      _instance;
} _RoomCreationErrors_default_instance_;
class CreatedRoomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreatedRoom>
      _instance;
} _CreatedRoom_default_instance_;
class ServerInputQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerInputQuery>
      _instance;
} _ServerInputQuery_default_instance_;
class ServerQueryReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerQueryReply>
      _instance;
} _ServerQueryReply_default_instance_;
class ClientRoomCreationRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientRoomCreationRequest>
      _instance;
} _ClientRoomCreationRequest_default_instance_;
class ClientRoomCreationReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientRoomCreationReply>
      _instance;
} _ClientRoomCreationReply_default_instance_;
class ClientConnectionToRoomRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientConnectionToRoomRequest>
      _instance;
} _ClientConnectionToRoomRequest_default_instance_;
class ClientConnectionToRoomReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientConnectionToRoomReply>
      _instance;
} _ClientConnectionToRoomReply_default_instance_;
class ServerQueryOrderNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerQueryOrderNotification>
      _instance;
} _ServerQueryOrderNotification_default_instance_;
class ServerReportsOpponentIsEnteringRoomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerReportsOpponentIsEnteringRoom>
      _instance;
} _ServerReportsOpponentIsEnteringRoom_default_instance_;
class ChartMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChartMessage>
      _instance;
} _ChartMessage_default_instance_;
class DefaultMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DefaultMessage>
      _instance;
} _DefaultMessage_default_instance_;
class ServerRoomChangesInSelectableListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerRoomChangesInSelectableList>
      _instance;
} _ServerRoomChangesInSelectableList_default_instance_;
class ClientWantedToEnterTheRoomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientWantedToEnterTheRoom>
      _instance;
} _ClientWantedToEnterTheRoom_default_instance_;
class ServerClientWantedToEnterTheRoomReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerClientWantedToEnterTheRoomReply>
      _instance;
} _ServerClientWantedToEnterTheRoomReply_default_instance_;
}  // namespace serverMessageSystem
namespace protobuf_serverMessageSystem_2eproto {
static void InitDefaultsCommonHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serverMessageSystem::_CommonHeader_default_instance_;
    new (ptr) ::serverMessageSystem::CommonHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serverMessageSystem::CommonHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CommonHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCommonHeader}, {}};

static void InitDefaultsTimeSettings() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serverMessageSystem::_TimeSettings_default_instance_;
    new (ptr) ::serverMessageSystem::TimeSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serverMessageSystem::TimeSettings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TimeSettings =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTimeSettings}, {}};

static void InitDefaultsGameType() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serverMessageSystem::_GameType_default_instance_;
    new (ptr) ::serverMessageSystem::GameType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serverMessageSystem::GameType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameType =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameType}, {}};

static void InitDefaultsGameSettings() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serverMessageSystem::_GameSettings_default_instance_;
    new (ptr) ::serverMessageSystem::GameSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serverMessageSystem::GameSettings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GameSettings =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGameSettings}, {
      &protobuf_serverMessageSystem_2eproto::scc_info_GameType.base,
      &protobuf_serverMessageSystem_2eproto::scc_info_TimeSettings.base,}};

static void InitDefaultsRoomCreationErrors() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serverMessageSystem::_RoomCreationErrors_default_instance_;
    new (ptr) ::serverMessageSystem::RoomCreationErrors();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serverMessageSystem::RoomCreationErrors::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RoomCreationErrors =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRoomCreationErrors}, {}};

static void InitDefaultsCreatedRoom() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serverMessageSystem::_CreatedRoom_default_instance_;
    new (ptr) ::serverMessageSystem::CreatedRoom();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serverMessageSystem::CreatedRoom::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CreatedRoom =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreatedRoom}, {}};

static void InitDefaultsServerInputQuery() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serverMessageSystem::_ServerInputQuery_default_instance_;
    new (ptr) ::serverMessageSystem::ServerInputQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serverMessageSystem::ServerInputQuery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ServerInputQuery =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsServerInputQuery}, {
      &protobuf_serverMessageSystem_2eproto::scc_info_CommonHeader.base,}};

static void InitDefaultsServerQueryReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serverMessageSystem::_ServerQueryReply_default_instance_;
    new (ptr) ::serverMessageSystem::ServerQueryReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serverMessageSystem::ServerQueryReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ServerQueryReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsServerQueryReply}, {
      &protobuf_serverMessageSystem_2eproto::scc_info_CommonHeader.base,}};

static void InitDefaultsClientRoomCreationRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serverMessageSystem::_ClientRoomCreationRequest_default_instance_;
    new (ptr) ::serverMessageSystem::ClientRoomCreationRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serverMessageSystem::ClientRoomCreationRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ClientRoomCreationRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsClientRoomCreationRequest}, {
      &protobuf_serverMessageSystem_2eproto::scc_info_CommonHeader.base,
      &protobuf_serverMessageSystem_2eproto::scc_info_GameSettings.base,}};

static void InitDefaultsClientRoomCreationReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serverMessageSystem::_ClientRoomCreationReply_default_instance_;
    new (ptr) ::serverMessageSystem::ClientRoomCreationReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serverMessageSystem::ClientRoomCreationReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ClientRoomCreationReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsClientRoomCreationReply}, {
      &protobuf_serverMessageSystem_2eproto::scc_info_CommonHeader.base,
      &protobuf_serverMessageSystem_2eproto::scc_info_RoomCreationErrors.base,}};

static void InitDefaultsClientConnectionToRoomRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serverMessageSystem::_ClientConnectionToRoomRequest_default_instance_;
    new (ptr) ::serverMessageSystem::ClientConnectionToRoomRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serverMessageSystem::ClientConnectionToRoomRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ClientConnectionToRoomRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsClientConnectionToRoomRequest}, {
      &protobuf_serverMessageSystem_2eproto::scc_info_CommonHeader.base,}};

static void InitDefaultsClientConnectionToRoomReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serverMessageSystem::_ClientConnectionToRoomReply_default_instance_;
    new (ptr) ::serverMessageSystem::ClientConnectionToRoomReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serverMessageSystem::ClientConnectionToRoomReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ClientConnectionToRoomReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsClientConnectionToRoomReply}, {
      &protobuf_serverMessageSystem_2eproto::scc_info_CommonHeader.base,
      &protobuf_serverMessageSystem_2eproto::scc_info_CreatedRoom.base,}};

static void InitDefaultsServerQueryOrderNotification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serverMessageSystem::_ServerQueryOrderNotification_default_instance_;
    new (ptr) ::serverMessageSystem::ServerQueryOrderNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serverMessageSystem::ServerQueryOrderNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ServerQueryOrderNotification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsServerQueryOrderNotification}, {
      &protobuf_serverMessageSystem_2eproto::scc_info_CommonHeader.base,}};

static void InitDefaultsServerReportsOpponentIsEnteringRoom() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serverMessageSystem::_ServerReportsOpponentIsEnteringRoom_default_instance_;
    new (ptr) ::serverMessageSystem::ServerReportsOpponentIsEnteringRoom();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serverMessageSystem::ServerReportsOpponentIsEnteringRoom::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ServerReportsOpponentIsEnteringRoom =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsServerReportsOpponentIsEnteringRoom}, {
      &protobuf_serverMessageSystem_2eproto::scc_info_CommonHeader.base,}};

static void InitDefaultsChartMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serverMessageSystem::_ChartMessage_default_instance_;
    new (ptr) ::serverMessageSystem::ChartMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serverMessageSystem::ChartMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ChartMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChartMessage}, {
      &protobuf_serverMessageSystem_2eproto::scc_info_CommonHeader.base,}};

static void InitDefaultsDefaultMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serverMessageSystem::_DefaultMessage_default_instance_;
    new (ptr) ::serverMessageSystem::DefaultMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serverMessageSystem::DefaultMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DefaultMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDefaultMessage}, {
      &protobuf_serverMessageSystem_2eproto::scc_info_CommonHeader.base,}};

static void InitDefaultsServerRoomChangesInSelectableList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serverMessageSystem::_ServerRoomChangesInSelectableList_default_instance_;
    new (ptr) ::serverMessageSystem::ServerRoomChangesInSelectableList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serverMessageSystem::ServerRoomChangesInSelectableList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ServerRoomChangesInSelectableList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsServerRoomChangesInSelectableList}, {
      &protobuf_serverMessageSystem_2eproto::scc_info_CommonHeader.base,
      &protobuf_serverMessageSystem_2eproto::scc_info_CreatedRoom.base,}};

static void InitDefaultsClientWantedToEnterTheRoom() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serverMessageSystem::_ClientWantedToEnterTheRoom_default_instance_;
    new (ptr) ::serverMessageSystem::ClientWantedToEnterTheRoom();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serverMessageSystem::ClientWantedToEnterTheRoom::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ClientWantedToEnterTheRoom =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsClientWantedToEnterTheRoom}, {
      &protobuf_serverMessageSystem_2eproto::scc_info_CommonHeader.base,}};

static void InitDefaultsServerClientWantedToEnterTheRoomReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serverMessageSystem::_ServerClientWantedToEnterTheRoomReply_default_instance_;
    new (ptr) ::serverMessageSystem::ServerClientWantedToEnterTheRoomReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serverMessageSystem::ServerClientWantedToEnterTheRoomReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ServerClientWantedToEnterTheRoomReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsServerClientWantedToEnterTheRoomReply}, {
      &protobuf_serverMessageSystem_2eproto::scc_info_CommonHeader.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CommonHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TimeSettings.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameType.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameSettings.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoomCreationErrors.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreatedRoom.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerInputQuery.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerQueryReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientRoomCreationRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientRoomCreationReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientConnectionToRoomRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientConnectionToRoomReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerQueryOrderNotification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerReportsOpponentIsEnteringRoom.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChartMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DefaultMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerRoomChangesInSelectableList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientWantedToEnterTheRoom.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerClientWantedToEnterTheRoomReply.base);
}

::google::protobuf::Metadata file_level_metadata[19];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::CommonHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::CommonHeader, subsystem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::CommonHeader, commandid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::TimeSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::TimeSettings, totaltimetomove_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::TimeSettings, timetothink_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::TimeSettings, timeforopponentsdecision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::TimeSettings, diplomacytime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::GameType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::GameType, hasaddonwildaxe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::GameType, hasaddonclericalerrors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::GameType, rulestype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::GameSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::GameSettings, gametype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::GameSettings, timesettings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::GameSettings, maximumnumberofplayers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::GameSettings, settingscorrectionallowed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::RoomCreationErrors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::RoomCreationErrors, nofreeslotsavailable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::RoomCreationErrors, rulesarenotsupported_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::RoomCreationErrors, incorrectsettings_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::CreatedRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::CreatedRoom, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::CreatedRoom, roomname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::CreatedRoom, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::CreatedRoom, maximumnumberofplayers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerInputQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerInputQuery, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerInputQuery, connectioncmdid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerInputQuery, clientname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerInputQuery, ostype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerQueryReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerQueryReply, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerQueryReply, connectioncmdid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerQueryReply, roomcreationallowed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerQueryReply, connectiontoroomallowed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerQueryReply, servername_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientRoomCreationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientRoomCreationRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientRoomCreationRequest, connectioncmdid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientRoomCreationRequest, clientname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientRoomCreationRequest, roomname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientRoomCreationRequest, gamesettings_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientRoomCreationReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientRoomCreationReply, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientRoomCreationReply, connectioncmdid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientRoomCreationReply, connectionallowed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientRoomCreationReply, slotid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientRoomCreationReply, freeslotsleft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientRoomCreationReply, roomcreationerrors_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientConnectionToRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientConnectionToRoomRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientConnectionToRoomRequest, connectioncmdid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientConnectionToRoomRequest, clientname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientConnectionToRoomRequest, connecttoanyroom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientConnectionToRoomRequest, agreetowait_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientConnectionToRoomReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientConnectionToRoomReply, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientConnectionToRoomReply, connectioncmdid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientConnectionToRoomReply, noroomsavailable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientConnectionToRoomReply, freeslotsleft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientConnectionToRoomReply, room_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientConnectionToRoomReply, queryorder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientConnectionToRoomReply, querysize_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerQueryOrderNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerQueryOrderNotification, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerQueryOrderNotification, connectioncmdid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerQueryOrderNotification, queryorder_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerReportsOpponentIsEnteringRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerReportsOpponentIsEnteringRoom, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerReportsOpponentIsEnteringRoom, connectioncmdid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerReportsOpponentIsEnteringRoom, opponentname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerReportsOpponentIsEnteringRoom, roomid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ChartMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ChartMessage, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ChartMessage, chartcmdid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ChartMessage, sendername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ChartMessage, chartmessage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ChartMessage, roomid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::DefaultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::DefaultMessage, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::DefaultMessage, chartcmdid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerRoomChangesInSelectableList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerRoomChangesInSelectableList, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerRoomChangesInSelectableList, deletedorupdateflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerRoomChangesInSelectableList, connectioncmdid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerRoomChangesInSelectableList, room_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientWantedToEnterTheRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientWantedToEnterTheRoom, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientWantedToEnterTheRoom, connectioncmdid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientWantedToEnterTheRoom, clientname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ClientWantedToEnterTheRoom, roomid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerClientWantedToEnterTheRoomReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerClientWantedToEnterTheRoomReply, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerClientWantedToEnterTheRoomReply, connectioncmdid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::serverMessageSystem::ServerClientWantedToEnterTheRoomReply, entranceallowed_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::serverMessageSystem::CommonHeader)},
  { 7, -1, sizeof(::serverMessageSystem::TimeSettings)},
  { 16, -1, sizeof(::serverMessageSystem::GameType)},
  { 24, -1, sizeof(::serverMessageSystem::GameSettings)},
  { 33, -1, sizeof(::serverMessageSystem::RoomCreationErrors)},
  { 41, -1, sizeof(::serverMessageSystem::CreatedRoom)},
  { 50, -1, sizeof(::serverMessageSystem::ServerInputQuery)},
  { 59, -1, sizeof(::serverMessageSystem::ServerQueryReply)},
  { 69, -1, sizeof(::serverMessageSystem::ClientRoomCreationRequest)},
  { 79, -1, sizeof(::serverMessageSystem::ClientRoomCreationReply)},
  { 90, -1, sizeof(::serverMessageSystem::ClientConnectionToRoomRequest)},
  { 100, -1, sizeof(::serverMessageSystem::ClientConnectionToRoomReply)},
  { 112, -1, sizeof(::serverMessageSystem::ServerQueryOrderNotification)},
  { 120, -1, sizeof(::serverMessageSystem::ServerReportsOpponentIsEnteringRoom)},
  { 129, -1, sizeof(::serverMessageSystem::ChartMessage)},
  { 139, -1, sizeof(::serverMessageSystem::DefaultMessage)},
  { 146, -1, sizeof(::serverMessageSystem::ServerRoomChangesInSelectableList)},
  { 155, -1, sizeof(::serverMessageSystem::ClientWantedToEnterTheRoom)},
  { 164, -1, sizeof(::serverMessageSystem::ServerClientWantedToEnterTheRoomReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::serverMessageSystem::_CommonHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serverMessageSystem::_TimeSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serverMessageSystem::_GameType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serverMessageSystem::_GameSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serverMessageSystem::_RoomCreationErrors_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serverMessageSystem::_CreatedRoom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serverMessageSystem::_ServerInputQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serverMessageSystem::_ServerQueryReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serverMessageSystem::_ClientRoomCreationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serverMessageSystem::_ClientRoomCreationReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serverMessageSystem::_ClientConnectionToRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serverMessageSystem::_ClientConnectionToRoomReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serverMessageSystem::_ServerQueryOrderNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serverMessageSystem::_ServerReportsOpponentIsEnteringRoom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serverMessageSystem::_ChartMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serverMessageSystem::_DefaultMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serverMessageSystem::_ServerRoomChangesInSelectableList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serverMessageSystem::_ClientWantedToEnterTheRoom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::serverMessageSystem::_ServerClientWantedToEnterTheRoomReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "serverMessageSystem.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 19);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031serverMessageSystem.proto\022\023serverMessa"
      "geSystem\"V\n\014CommonHeader\0223\n\tsubSystem\030\001 "
      "\001(\0162 .serverMessageSystem.SubSystemID\022\021\n"
      "\tcommandId\030\002 \001(\r\"u\n\014TimeSettings\022\027\n\017tota"
      "lTimeToMove\030\001 \001(\r\022\023\n\013timeToThink\030\002 \001(\r\022 "
      "\n\030timeForOpponentsDecision\030\003 \001(\r\022\025\n\rdipl"
      "omacyTime\030\004 \001(\r\"v\n\010GameType\022\027\n\017hasAddonW"
      "ildAxe\030\001 \001(\010\022\036\n\026hasAddonClericalErrors\030\002"
      " \001(\010\0221\n\trulesType\030\003 \001(\0162\036.serverMessageS"
      "ystem.RulesType\"\273\001\n\014GameSettings\022/\n\010game"
      "Type\030\001 \001(\0132\035.serverMessageSystem.GameTyp"
      "e\0227\n\014timeSettings\030\002 \001(\0132!.serverMessageS"
      "ystem.TimeSettings\022\036\n\026maximumNumberOfPla"
      "yers\030\003 \001(\r\022!\n\031settingsCorrectionAllowed\030"
      "\004 \001(\010\"k\n\022RoomCreationErrors\022\034\n\024noFreeSlo"
      "tsAvailable\030\001 \001(\010\022\034\n\024rulesAreNotSupporte"
      "d\030\002 \001(\010\022\031\n\021incorrectSettings\030\003 \001(\010\"`\n\013Cr"
      "eatedRoom\022\016\n\006roomID\030\001 \001(\r\022\020\n\010roomName\030\002 "
      "\001(\t\022\017\n\007players\030\003 \001(\r\022\036\n\026maximumNumberOfP"
      "layers\030\004 \001(\r\"\263\001\n\020ServerInputQuery\0221\n\006hea"
      "der\030\001 \001(\0132!.serverMessageSystem.CommonHe"
      "ader\022H\n\017connectionCmdID\030\002 \001(\0162/.serverMe"
      "ssageSystem.ConnectionSubSysCommandsID\022\022"
      "\n\nclientName\030\003 \001(\t\022\016\n\006OsType\030\004 \001(\t\"\341\001\n\020S"
      "erverQueryReply\0221\n\006header\030\001 \001(\0132!.server"
      "MessageSystem.CommonHeader\022H\n\017connection"
      "CmdID\030\002 \001(\0162/.serverMessageSystem.Connec"
      "tionSubSysCommandsID\022\033\n\023roomCreationAllo"
      "wed\030\003 \001(\010\022\037\n\027connectionToRoomAllowed\030\004 \001"
      "(\010\022\022\n\nserverName\030\005 \001(\t\"\367\001\n\031ClientRoomCre"
      "ationRequest\0221\n\006header\030\001 \001(\0132!.serverMes"
      "sageSystem.CommonHeader\022H\n\017connectionCmd"
      "ID\030\002 \001(\0162/.serverMessageSystem.Connectio"
      "nSubSysCommandsID\022\022\n\nclientName\030\003 \001(\t\022\020\n"
      "\010roomName\030\004 \001(\t\0227\n\014gameSettings\030\005 \001(\0132!."
      "serverMessageSystem.GameSettings\"\235\002\n\027Cli"
      "entRoomCreationReply\0221\n\006header\030\001 \001(\0132!.s"
      "erverMessageSystem.CommonHeader\022H\n\017conne"
      "ctionCmdID\030\002 \001(\0162/.serverMessageSystem.C"
      "onnectionSubSysCommandsID\022\031\n\021connectionA"
      "llowed\030\003 \001(\010\022\016\n\006slotID\030\004 \001(\r\022\025\n\rfreeSlot"
      "sLeft\030\005 \001(\r\022C\n\022roomCreationErrors\030\006 \001(\0132"
      "\'.serverMessageSystem.RoomCreationErrors"
      "\"\337\001\n\035ClientConnectionToRoomRequest\0221\n\006he"
      "ader\030\001 \001(\0132!.serverMessageSystem.CommonH"
      "eader\022H\n\017connectionCmdID\030\002 \001(\0162/.serverM"
      "essageSystem.ConnectionSubSysCommandsID\022"
      "\022\n\nclientName\030\003 \001(\t\022\030\n\020connectToAnyRoom\030"
      "\004 \001(\010\022\023\n\013agreeToWait\030\005 \001(\010\"\242\002\n\033ClientCon"
      "nectionToRoomReply\0221\n\006header\030\001 \001(\0132!.ser"
      "verMessageSystem.CommonHeader\022H\n\017connect"
      "ionCmdID\030\002 \001(\0162/.serverMessageSystem.Con"
      "nectionSubSysCommandsID\022\030\n\020noRoomsAvaila"
      "ble\030\003 \001(\010\022\025\n\rfreeSlotsLeft\030\004 \001(\r\022.\n\004room"
      "\030\005 \003(\0132 .serverMessageSystem.CreatedRoom"
      "\022\022\n\nqueryOrder\030\006 \001(\r\022\021\n\tquerySize\030\007 \001(\r\""
      "\257\001\n\034ServerQueryOrderNotification\0221\n\006head"
      "er\030\001 \001(\0132!.serverMessageSystem.CommonHea"
      "der\022H\n\017connectionCmdID\030\002 \001(\0162/.serverMes"
      "sageSystem.ConnectionSubSysCommandsID\022\022\n"
      "\nqueryOrder\030\003 \001(\r\"\310\001\n#ServerReportsOppon"
      "entIsEnteringRoom\0221\n\006header\030\001 \001(\0132!.serv"
      "erMessageSystem.CommonHeader\022H\n\017connecti"
      "onCmdID\030\002 \001(\0162/.serverMessageSystem.Conn"
      "ectionSubSysCommandsID\022\024\n\014opponentName\030\003"
      " \001(\t\022\016\n\006roomID\030\004 \001(\r\"\273\001\n\014ChartMessage\0221\n"
      "\006header\030\001 \001(\0132!.serverMessageSystem.Comm"
      "onHeader\022>\n\nchartCmdID\030\002 \001(\0162*.serverMes"
      "sageSystem.ChartSubSysCommandsID\022\022\n\nsend"
      "erName\030\003 \001(\t\022\024\n\014chartMessage\030\004 \001(\t\022\016\n\006ro"
      "omID\030\005 \001(\r\"\203\001\n\016DefaultMessage\0221\n\006header\030"
      "\001 \001(\0132!.serverMessageSystem.CommonHeader"
      "\022>\n\nchartCmdID\030\002 \001(\0162*.serverMessageSyst"
      "em.ChartSubSysCommandsID\"\355\001\n!ServerRoomC"
      "hangesInSelectableList\0221\n\006header\030\001 \001(\0132!"
      ".serverMessageSystem.CommonHeader\022\033\n\023del"
      "etedOrUpdateFlag\030\002 \001(\010\022H\n\017connectionCmdI"
      "D\030\003 \001(\0162/.serverMessageSystem.Connection"
      "SubSysCommandsID\022.\n\004room\030\004 \001(\0132 .serverM"
      "essageSystem.CreatedRoom\"\275\001\n\032ClientWante"
      "dToEnterTheRoom\0221\n\006header\030\001 \001(\0132!.server"
      "MessageSystem.CommonHeader\022H\n\017connection"
      "CmdID\030\002 \001(\0162/.serverMessageSystem.Connec"
      "tionSubSysCommandsID\022\022\n\nclientName\030\003 \001(\t"
      "\022\016\n\006roomID\030\004 \001(\r\"\275\001\n%ServerClientWantedT"
      "oEnterTheRoomReply\0221\n\006header\030\001 \001(\0132!.ser"
      "verMessageSystem.CommonHeader\022H\n\017connect"
      "ionCmdID\030\002 \001(\0162/.serverMessageSystem.Con"
      "nectionSubSysCommandsID\022\027\n\017entranceAllow"
      "ed\030\003 \001(\010*&\n\tRulesType\022\r\n\tAutomatic\020\000\022\n\n\006"
      "Manual\020\001*y\n\013SubSystemID\022\030\n\024CONNECTION_SU"
      "BSYSTEM\020\000\022\032\n\026GAME_ACTIONS_SUBSYSTEM\020\001\022\037\n"
      "\033GAME_NOTIFICATION_SUBSYSTEM\020\002\022\023\n\017CHART_"
      "SUBSYSTEM\020\003*\231\003\n\032ConnectionSubSysCommands"
      "ID\022\036\n\032SERVER_INPUT_QUERY_REQUEST\020\000\022\034\n\030SE"
      "RVER_INPUT_QUERY_REPLY\020\001\022 \n\034CLIENT_ROOM_"
      "CREATION_REQUEST\020\002\022\036\n\032CLIENT_ROOM_CREATI"
      "ON_REPLY\020\003\022%\n!CLIENT_CONNECTION_TO_ROOM_"
      "REQUEST\020\004\022#\n\037CLIENT_CONNECTION_TO_ROOM_R"
      "EPLY\020\005\022,\n(SERVER_REPORTS_OPPONENT_IS_ENT"
      "ERING_ROOM\020\006\022*\n&SERVER_ROOM_CHANGES_IN_S"
      "ELECTABLE_LIST\020\007\022#\n\037CLIENT_WANTED_TO_ENT"
      "ER_THE_ROOM\020\010\0220\n,SERVER_CLIENT_WANTED_TO"
      "_ENTER_THE_ROOM_REPLY\020\t*B\n\025ChartSubSysCo"
      "mmandsID\022\021\n\rCHART_MESSAGE\020\000\022\026\n\022CHART_NOT"
      "IFICATION\020\001*9\n\023GameCreationRequest\022\017\n\013Jo"
      "inTheGame\020\000\022\021\n\rCreateTheGame\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4278);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "serverMessageSystem.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_serverMessageSystem_2eproto
namespace serverMessageSystem {
const ::google::protobuf::EnumDescriptor* RulesType_descriptor() {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_serverMessageSystem_2eproto::file_level_enum_descriptors[0];
}
bool RulesType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SubSystemID_descriptor() {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_serverMessageSystem_2eproto::file_level_enum_descriptors[1];
}
bool SubSystemID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConnectionSubSysCommandsID_descriptor() {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_serverMessageSystem_2eproto::file_level_enum_descriptors[2];
}
bool ConnectionSubSysCommandsID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChartSubSysCommandsID_descriptor() {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_serverMessageSystem_2eproto::file_level_enum_descriptors[3];
}
bool ChartSubSysCommandsID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GameCreationRequest_descriptor() {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_serverMessageSystem_2eproto::file_level_enum_descriptors[4];
}
bool GameCreationRequest_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CommonHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonHeader::kSubSystemFieldNumber;
const int CommonHeader::kCommandIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonHeader::CommonHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serverMessageSystem_2eproto::scc_info_CommonHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serverMessageSystem.CommonHeader)
}
CommonHeader::CommonHeader(const CommonHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&subsystem_, &from.subsystem_,
    static_cast<size_t>(reinterpret_cast<char*>(&commandid_) -
    reinterpret_cast<char*>(&subsystem_)) + sizeof(commandid_));
  // @@protoc_insertion_point(copy_constructor:serverMessageSystem.CommonHeader)
}

void CommonHeader::SharedCtor() {
  ::memset(&subsystem_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commandid_) -
      reinterpret_cast<char*>(&subsystem_)) + sizeof(commandid_));
}

CommonHeader::~CommonHeader() {
  // @@protoc_insertion_point(destructor:serverMessageSystem.CommonHeader)
  SharedDtor();
}

void CommonHeader::SharedDtor() {
}

void CommonHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommonHeader::descriptor() {
  ::protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommonHeader& CommonHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_serverMessageSystem_2eproto::scc_info_CommonHeader.base);
  return *internal_default_instance();
}


void CommonHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:serverMessageSystem.CommonHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&subsystem_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commandid_) -
      reinterpret_cast<char*>(&subsystem_)) + sizeof(commandid_));
  _internal_metadata_.Clear();
}

bool CommonHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serverMessageSystem.CommonHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .serverMessageSystem.SubSystemID subSystem = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_subsystem(static_cast< ::serverMessageSystem::SubSystemID >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 commandId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commandid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serverMessageSystem.CommonHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serverMessageSystem.CommonHeader)
  return false;
#undef DO_
}

void CommonHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serverMessageSystem.CommonHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.SubSystemID subSystem = 1;
  if (this->subsystem() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->subsystem(), output);
  }

  // uint32 commandId = 2;
  if (this->commandid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->commandid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:serverMessageSystem.CommonHeader)
}

::google::protobuf::uint8* CommonHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serverMessageSystem.CommonHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.SubSystemID subSystem = 1;
  if (this->subsystem() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->subsystem(), target);
  }

  // uint32 commandId = 2;
  if (this->commandid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->commandid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverMessageSystem.CommonHeader)
  return target;
}

size_t CommonHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverMessageSystem.CommonHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .serverMessageSystem.SubSystemID subSystem = 1;
  if (this->subsystem() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subsystem());
  }

  // uint32 commandId = 2;
  if (this->commandid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->commandid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serverMessageSystem.CommonHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serverMessageSystem.CommonHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serverMessageSystem.CommonHeader)
    MergeFrom(*source);
  }
}

void CommonHeader::MergeFrom(const CommonHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serverMessageSystem.CommonHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subsystem() != 0) {
    set_subsystem(from.subsystem());
  }
  if (from.commandid() != 0) {
    set_commandid(from.commandid());
  }
}

void CommonHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serverMessageSystem.CommonHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonHeader::CopyFrom(const CommonHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverMessageSystem.CommonHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonHeader::IsInitialized() const {
  return true;
}

void CommonHeader::Swap(CommonHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonHeader::InternalSwap(CommonHeader* other) {
  using std::swap;
  swap(subsystem_, other->subsystem_);
  swap(commandid_, other->commandid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommonHeader::GetMetadata() const {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TimeSettings::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeSettings::kTotalTimeToMoveFieldNumber;
const int TimeSettings::kTimeToThinkFieldNumber;
const int TimeSettings::kTimeForOpponentsDecisionFieldNumber;
const int TimeSettings::kDiplomacyTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeSettings::TimeSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serverMessageSystem_2eproto::scc_info_TimeSettings.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serverMessageSystem.TimeSettings)
}
TimeSettings::TimeSettings(const TimeSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&totaltimetomove_, &from.totaltimetomove_,
    static_cast<size_t>(reinterpret_cast<char*>(&diplomacytime_) -
    reinterpret_cast<char*>(&totaltimetomove_)) + sizeof(diplomacytime_));
  // @@protoc_insertion_point(copy_constructor:serverMessageSystem.TimeSettings)
}

void TimeSettings::SharedCtor() {
  ::memset(&totaltimetomove_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diplomacytime_) -
      reinterpret_cast<char*>(&totaltimetomove_)) + sizeof(diplomacytime_));
}

TimeSettings::~TimeSettings() {
  // @@protoc_insertion_point(destructor:serverMessageSystem.TimeSettings)
  SharedDtor();
}

void TimeSettings::SharedDtor() {
}

void TimeSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TimeSettings::descriptor() {
  ::protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeSettings& TimeSettings::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_serverMessageSystem_2eproto::scc_info_TimeSettings.base);
  return *internal_default_instance();
}


void TimeSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:serverMessageSystem.TimeSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&totaltimetomove_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diplomacytime_) -
      reinterpret_cast<char*>(&totaltimetomove_)) + sizeof(diplomacytime_));
  _internal_metadata_.Clear();
}

bool TimeSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serverMessageSystem.TimeSettings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 totalTimeToMove = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totaltimetomove_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 timeToThink = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timetothink_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 timeForOpponentsDecision = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeforopponentsdecision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 diplomacyTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diplomacytime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serverMessageSystem.TimeSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serverMessageSystem.TimeSettings)
  return false;
#undef DO_
}

void TimeSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serverMessageSystem.TimeSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 totalTimeToMove = 1;
  if (this->totaltimetomove() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->totaltimetomove(), output);
  }

  // uint32 timeToThink = 2;
  if (this->timetothink() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timetothink(), output);
  }

  // uint32 timeForOpponentsDecision = 3;
  if (this->timeforopponentsdecision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timeforopponentsdecision(), output);
  }

  // uint32 diplomacyTime = 4;
  if (this->diplomacytime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->diplomacytime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:serverMessageSystem.TimeSettings)
}

::google::protobuf::uint8* TimeSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serverMessageSystem.TimeSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 totalTimeToMove = 1;
  if (this->totaltimetomove() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->totaltimetomove(), target);
  }

  // uint32 timeToThink = 2;
  if (this->timetothink() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timetothink(), target);
  }

  // uint32 timeForOpponentsDecision = 3;
  if (this->timeforopponentsdecision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timeforopponentsdecision(), target);
  }

  // uint32 diplomacyTime = 4;
  if (this->diplomacytime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->diplomacytime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverMessageSystem.TimeSettings)
  return target;
}

size_t TimeSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverMessageSystem.TimeSettings)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 totalTimeToMove = 1;
  if (this->totaltimetomove() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totaltimetomove());
  }

  // uint32 timeToThink = 2;
  if (this->timetothink() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timetothink());
  }

  // uint32 timeForOpponentsDecision = 3;
  if (this->timeforopponentsdecision() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeforopponentsdecision());
  }

  // uint32 diplomacyTime = 4;
  if (this->diplomacytime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->diplomacytime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serverMessageSystem.TimeSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serverMessageSystem.TimeSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serverMessageSystem.TimeSettings)
    MergeFrom(*source);
  }
}

void TimeSettings::MergeFrom(const TimeSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serverMessageSystem.TimeSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.totaltimetomove() != 0) {
    set_totaltimetomove(from.totaltimetomove());
  }
  if (from.timetothink() != 0) {
    set_timetothink(from.timetothink());
  }
  if (from.timeforopponentsdecision() != 0) {
    set_timeforopponentsdecision(from.timeforopponentsdecision());
  }
  if (from.diplomacytime() != 0) {
    set_diplomacytime(from.diplomacytime());
  }
}

void TimeSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serverMessageSystem.TimeSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSettings::CopyFrom(const TimeSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverMessageSystem.TimeSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSettings::IsInitialized() const {
  return true;
}

void TimeSettings::Swap(TimeSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeSettings::InternalSwap(TimeSettings* other) {
  using std::swap;
  swap(totaltimetomove_, other->totaltimetomove_);
  swap(timetothink_, other->timetothink_);
  swap(timeforopponentsdecision_, other->timeforopponentsdecision_);
  swap(diplomacytime_, other->diplomacytime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TimeSettings::GetMetadata() const {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameType::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameType::kHasAddonWildAxeFieldNumber;
const int GameType::kHasAddonClericalErrorsFieldNumber;
const int GameType::kRulesTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameType::GameType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serverMessageSystem_2eproto::scc_info_GameType.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serverMessageSystem.GameType)
}
GameType::GameType(const GameType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hasaddonwildaxe_, &from.hasaddonwildaxe_,
    static_cast<size_t>(reinterpret_cast<char*>(&rulestype_) -
    reinterpret_cast<char*>(&hasaddonwildaxe_)) + sizeof(rulestype_));
  // @@protoc_insertion_point(copy_constructor:serverMessageSystem.GameType)
}

void GameType::SharedCtor() {
  ::memset(&hasaddonwildaxe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rulestype_) -
      reinterpret_cast<char*>(&hasaddonwildaxe_)) + sizeof(rulestype_));
}

GameType::~GameType() {
  // @@protoc_insertion_point(destructor:serverMessageSystem.GameType)
  SharedDtor();
}

void GameType::SharedDtor() {
}

void GameType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameType::descriptor() {
  ::protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameType& GameType::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_serverMessageSystem_2eproto::scc_info_GameType.base);
  return *internal_default_instance();
}


void GameType::Clear() {
// @@protoc_insertion_point(message_clear_start:serverMessageSystem.GameType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hasaddonwildaxe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rulestype_) -
      reinterpret_cast<char*>(&hasaddonwildaxe_)) + sizeof(rulestype_));
  _internal_metadata_.Clear();
}

bool GameType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serverMessageSystem.GameType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool hasAddonWildAxe = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasaddonwildaxe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hasAddonClericalErrors = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasaddonclericalerrors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .serverMessageSystem.RulesType rulesType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rulestype(static_cast< ::serverMessageSystem::RulesType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serverMessageSystem.GameType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serverMessageSystem.GameType)
  return false;
#undef DO_
}

void GameType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serverMessageSystem.GameType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool hasAddonWildAxe = 1;
  if (this->hasaddonwildaxe() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hasaddonwildaxe(), output);
  }

  // bool hasAddonClericalErrors = 2;
  if (this->hasaddonclericalerrors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hasaddonclericalerrors(), output);
  }

  // .serverMessageSystem.RulesType rulesType = 3;
  if (this->rulestype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->rulestype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:serverMessageSystem.GameType)
}

::google::protobuf::uint8* GameType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serverMessageSystem.GameType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool hasAddonWildAxe = 1;
  if (this->hasaddonwildaxe() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hasaddonwildaxe(), target);
  }

  // bool hasAddonClericalErrors = 2;
  if (this->hasaddonclericalerrors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hasaddonclericalerrors(), target);
  }

  // .serverMessageSystem.RulesType rulesType = 3;
  if (this->rulestype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->rulestype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverMessageSystem.GameType)
  return target;
}

size_t GameType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverMessageSystem.GameType)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool hasAddonWildAxe = 1;
  if (this->hasaddonwildaxe() != 0) {
    total_size += 1 + 1;
  }

  // bool hasAddonClericalErrors = 2;
  if (this->hasaddonclericalerrors() != 0) {
    total_size += 1 + 1;
  }

  // .serverMessageSystem.RulesType rulesType = 3;
  if (this->rulestype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rulestype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serverMessageSystem.GameType)
  GOOGLE_DCHECK_NE(&from, this);
  const GameType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serverMessageSystem.GameType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serverMessageSystem.GameType)
    MergeFrom(*source);
  }
}

void GameType::MergeFrom(const GameType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serverMessageSystem.GameType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hasaddonwildaxe() != 0) {
    set_hasaddonwildaxe(from.hasaddonwildaxe());
  }
  if (from.hasaddonclericalerrors() != 0) {
    set_hasaddonclericalerrors(from.hasaddonclericalerrors());
  }
  if (from.rulestype() != 0) {
    set_rulestype(from.rulestype());
  }
}

void GameType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serverMessageSystem.GameType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameType::CopyFrom(const GameType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverMessageSystem.GameType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameType::IsInitialized() const {
  return true;
}

void GameType::Swap(GameType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameType::InternalSwap(GameType* other) {
  using std::swap;
  swap(hasaddonwildaxe_, other->hasaddonwildaxe_);
  swap(hasaddonclericalerrors_, other->hasaddonclericalerrors_);
  swap(rulestype_, other->rulestype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameType::GetMetadata() const {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameSettings::InitAsDefaultInstance() {
  ::serverMessageSystem::_GameSettings_default_instance_._instance.get_mutable()->gametype_ = const_cast< ::serverMessageSystem::GameType*>(
      ::serverMessageSystem::GameType::internal_default_instance());
  ::serverMessageSystem::_GameSettings_default_instance_._instance.get_mutable()->timesettings_ = const_cast< ::serverMessageSystem::TimeSettings*>(
      ::serverMessageSystem::TimeSettings::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameSettings::kGameTypeFieldNumber;
const int GameSettings::kTimeSettingsFieldNumber;
const int GameSettings::kMaximumNumberOfPlayersFieldNumber;
const int GameSettings::kSettingsCorrectionAllowedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSettings::GameSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serverMessageSystem_2eproto::scc_info_GameSettings.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serverMessageSystem.GameSettings)
}
GameSettings::GameSettings(const GameSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gametype()) {
    gametype_ = new ::serverMessageSystem::GameType(*from.gametype_);
  } else {
    gametype_ = NULL;
  }
  if (from.has_timesettings()) {
    timesettings_ = new ::serverMessageSystem::TimeSettings(*from.timesettings_);
  } else {
    timesettings_ = NULL;
  }
  ::memcpy(&maximumnumberofplayers_, &from.maximumnumberofplayers_,
    static_cast<size_t>(reinterpret_cast<char*>(&settingscorrectionallowed_) -
    reinterpret_cast<char*>(&maximumnumberofplayers_)) + sizeof(settingscorrectionallowed_));
  // @@protoc_insertion_point(copy_constructor:serverMessageSystem.GameSettings)
}

void GameSettings::SharedCtor() {
  ::memset(&gametype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settingscorrectionallowed_) -
      reinterpret_cast<char*>(&gametype_)) + sizeof(settingscorrectionallowed_));
}

GameSettings::~GameSettings() {
  // @@protoc_insertion_point(destructor:serverMessageSystem.GameSettings)
  SharedDtor();
}

void GameSettings::SharedDtor() {
  if (this != internal_default_instance()) delete gametype_;
  if (this != internal_default_instance()) delete timesettings_;
}

void GameSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameSettings::descriptor() {
  ::protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameSettings& GameSettings::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_serverMessageSystem_2eproto::scc_info_GameSettings.base);
  return *internal_default_instance();
}


void GameSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:serverMessageSystem.GameSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && gametype_ != NULL) {
    delete gametype_;
  }
  gametype_ = NULL;
  if (GetArenaNoVirtual() == NULL && timesettings_ != NULL) {
    delete timesettings_;
  }
  timesettings_ = NULL;
  ::memset(&maximumnumberofplayers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settingscorrectionallowed_) -
      reinterpret_cast<char*>(&maximumnumberofplayers_)) + sizeof(settingscorrectionallowed_));
  _internal_metadata_.Clear();
}

bool GameSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serverMessageSystem.GameSettings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .serverMessageSystem.GameType gameType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gametype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .serverMessageSystem.TimeSettings timeSettings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timesettings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 maximumNumberOfPlayers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maximumnumberofplayers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool settingsCorrectionAllowed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &settingscorrectionallowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serverMessageSystem.GameSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serverMessageSystem.GameSettings)
  return false;
#undef DO_
}

void GameSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serverMessageSystem.GameSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.GameType gameType = 1;
  if (this->has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_gametype(), output);
  }

  // .serverMessageSystem.TimeSettings timeSettings = 2;
  if (this->has_timesettings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_timesettings(), output);
  }

  // uint32 maximumNumberOfPlayers = 3;
  if (this->maximumnumberofplayers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maximumnumberofplayers(), output);
  }

  // bool settingsCorrectionAllowed = 4;
  if (this->settingscorrectionallowed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->settingscorrectionallowed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:serverMessageSystem.GameSettings)
}

::google::protobuf::uint8* GameSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serverMessageSystem.GameSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.GameType gameType = 1;
  if (this->has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_gametype(), deterministic, target);
  }

  // .serverMessageSystem.TimeSettings timeSettings = 2;
  if (this->has_timesettings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_timesettings(), deterministic, target);
  }

  // uint32 maximumNumberOfPlayers = 3;
  if (this->maximumnumberofplayers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maximumnumberofplayers(), target);
  }

  // bool settingsCorrectionAllowed = 4;
  if (this->settingscorrectionallowed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->settingscorrectionallowed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverMessageSystem.GameSettings)
  return target;
}

size_t GameSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverMessageSystem.GameSettings)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .serverMessageSystem.GameType gameType = 1;
  if (this->has_gametype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gametype_);
  }

  // .serverMessageSystem.TimeSettings timeSettings = 2;
  if (this->has_timesettings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timesettings_);
  }

  // uint32 maximumNumberOfPlayers = 3;
  if (this->maximumnumberofplayers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maximumnumberofplayers());
  }

  // bool settingsCorrectionAllowed = 4;
  if (this->settingscorrectionallowed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serverMessageSystem.GameSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serverMessageSystem.GameSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serverMessageSystem.GameSettings)
    MergeFrom(*source);
  }
}

void GameSettings::MergeFrom(const GameSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serverMessageSystem.GameSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gametype()) {
    mutable_gametype()->::serverMessageSystem::GameType::MergeFrom(from.gametype());
  }
  if (from.has_timesettings()) {
    mutable_timesettings()->::serverMessageSystem::TimeSettings::MergeFrom(from.timesettings());
  }
  if (from.maximumnumberofplayers() != 0) {
    set_maximumnumberofplayers(from.maximumnumberofplayers());
  }
  if (from.settingscorrectionallowed() != 0) {
    set_settingscorrectionallowed(from.settingscorrectionallowed());
  }
}

void GameSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serverMessageSystem.GameSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSettings::CopyFrom(const GameSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverMessageSystem.GameSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSettings::IsInitialized() const {
  return true;
}

void GameSettings::Swap(GameSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSettings::InternalSwap(GameSettings* other) {
  using std::swap;
  swap(gametype_, other->gametype_);
  swap(timesettings_, other->timesettings_);
  swap(maximumnumberofplayers_, other->maximumnumberofplayers_);
  swap(settingscorrectionallowed_, other->settingscorrectionallowed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameSettings::GetMetadata() const {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoomCreationErrors::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomCreationErrors::kNoFreeSlotsAvailableFieldNumber;
const int RoomCreationErrors::kRulesAreNotSupportedFieldNumber;
const int RoomCreationErrors::kIncorrectSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomCreationErrors::RoomCreationErrors()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serverMessageSystem_2eproto::scc_info_RoomCreationErrors.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serverMessageSystem.RoomCreationErrors)
}
RoomCreationErrors::RoomCreationErrors(const RoomCreationErrors& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nofreeslotsavailable_, &from.nofreeslotsavailable_,
    static_cast<size_t>(reinterpret_cast<char*>(&incorrectsettings_) -
    reinterpret_cast<char*>(&nofreeslotsavailable_)) + sizeof(incorrectsettings_));
  // @@protoc_insertion_point(copy_constructor:serverMessageSystem.RoomCreationErrors)
}

void RoomCreationErrors::SharedCtor() {
  ::memset(&nofreeslotsavailable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&incorrectsettings_) -
      reinterpret_cast<char*>(&nofreeslotsavailable_)) + sizeof(incorrectsettings_));
}

RoomCreationErrors::~RoomCreationErrors() {
  // @@protoc_insertion_point(destructor:serverMessageSystem.RoomCreationErrors)
  SharedDtor();
}

void RoomCreationErrors::SharedDtor() {
}

void RoomCreationErrors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoomCreationErrors::descriptor() {
  ::protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoomCreationErrors& RoomCreationErrors::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_serverMessageSystem_2eproto::scc_info_RoomCreationErrors.base);
  return *internal_default_instance();
}


void RoomCreationErrors::Clear() {
// @@protoc_insertion_point(message_clear_start:serverMessageSystem.RoomCreationErrors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&nofreeslotsavailable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&incorrectsettings_) -
      reinterpret_cast<char*>(&nofreeslotsavailable_)) + sizeof(incorrectsettings_));
  _internal_metadata_.Clear();
}

bool RoomCreationErrors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serverMessageSystem.RoomCreationErrors)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool noFreeSlotsAvailable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nofreeslotsavailable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool rulesAreNotSupported = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rulesarenotsupported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool incorrectSettings = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incorrectsettings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serverMessageSystem.RoomCreationErrors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serverMessageSystem.RoomCreationErrors)
  return false;
#undef DO_
}

void RoomCreationErrors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serverMessageSystem.RoomCreationErrors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool noFreeSlotsAvailable = 1;
  if (this->nofreeslotsavailable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->nofreeslotsavailable(), output);
  }

  // bool rulesAreNotSupported = 2;
  if (this->rulesarenotsupported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->rulesarenotsupported(), output);
  }

  // bool incorrectSettings = 3;
  if (this->incorrectsettings() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->incorrectsettings(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:serverMessageSystem.RoomCreationErrors)
}

::google::protobuf::uint8* RoomCreationErrors::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serverMessageSystem.RoomCreationErrors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool noFreeSlotsAvailable = 1;
  if (this->nofreeslotsavailable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->nofreeslotsavailable(), target);
  }

  // bool rulesAreNotSupported = 2;
  if (this->rulesarenotsupported() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->rulesarenotsupported(), target);
  }

  // bool incorrectSettings = 3;
  if (this->incorrectsettings() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->incorrectsettings(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverMessageSystem.RoomCreationErrors)
  return target;
}

size_t RoomCreationErrors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverMessageSystem.RoomCreationErrors)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool noFreeSlotsAvailable = 1;
  if (this->nofreeslotsavailable() != 0) {
    total_size += 1 + 1;
  }

  // bool rulesAreNotSupported = 2;
  if (this->rulesarenotsupported() != 0) {
    total_size += 1 + 1;
  }

  // bool incorrectSettings = 3;
  if (this->incorrectsettings() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomCreationErrors::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serverMessageSystem.RoomCreationErrors)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomCreationErrors* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomCreationErrors>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serverMessageSystem.RoomCreationErrors)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serverMessageSystem.RoomCreationErrors)
    MergeFrom(*source);
  }
}

void RoomCreationErrors::MergeFrom(const RoomCreationErrors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serverMessageSystem.RoomCreationErrors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nofreeslotsavailable() != 0) {
    set_nofreeslotsavailable(from.nofreeslotsavailable());
  }
  if (from.rulesarenotsupported() != 0) {
    set_rulesarenotsupported(from.rulesarenotsupported());
  }
  if (from.incorrectsettings() != 0) {
    set_incorrectsettings(from.incorrectsettings());
  }
}

void RoomCreationErrors::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serverMessageSystem.RoomCreationErrors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomCreationErrors::CopyFrom(const RoomCreationErrors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverMessageSystem.RoomCreationErrors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCreationErrors::IsInitialized() const {
  return true;
}

void RoomCreationErrors::Swap(RoomCreationErrors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomCreationErrors::InternalSwap(RoomCreationErrors* other) {
  using std::swap;
  swap(nofreeslotsavailable_, other->nofreeslotsavailable_);
  swap(rulesarenotsupported_, other->rulesarenotsupported_);
  swap(incorrectsettings_, other->incorrectsettings_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoomCreationErrors::GetMetadata() const {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreatedRoom::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreatedRoom::kRoomIDFieldNumber;
const int CreatedRoom::kRoomNameFieldNumber;
const int CreatedRoom::kPlayersFieldNumber;
const int CreatedRoom::kMaximumNumberOfPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreatedRoom::CreatedRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serverMessageSystem_2eproto::scc_info_CreatedRoom.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serverMessageSystem.CreatedRoom)
}
CreatedRoom::CreatedRoom(const CreatedRoom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.roomname().size() > 0) {
    roomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomname_);
  }
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&maximumnumberofplayers_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(maximumnumberofplayers_));
  // @@protoc_insertion_point(copy_constructor:serverMessageSystem.CreatedRoom)
}

void CreatedRoom::SharedCtor() {
  roomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximumnumberofplayers_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(maximumnumberofplayers_));
}

CreatedRoom::~CreatedRoom() {
  // @@protoc_insertion_point(destructor:serverMessageSystem.CreatedRoom)
  SharedDtor();
}

void CreatedRoom::SharedDtor() {
  roomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreatedRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CreatedRoom::descriptor() {
  ::protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreatedRoom& CreatedRoom::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_serverMessageSystem_2eproto::scc_info_CreatedRoom.base);
  return *internal_default_instance();
}


void CreatedRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:serverMessageSystem.CreatedRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximumnumberofplayers_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(maximumnumberofplayers_));
  _internal_metadata_.Clear();
}

bool CreatedRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serverMessageSystem.CreatedRoom)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 roomID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string roomName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roomname().data(), static_cast<int>(this->roomname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "serverMessageSystem.CreatedRoom.roomName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 players = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 maximumNumberOfPlayers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maximumnumberofplayers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serverMessageSystem.CreatedRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serverMessageSystem.CreatedRoom)
  return false;
#undef DO_
}

void CreatedRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serverMessageSystem.CreatedRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 roomID = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roomid(), output);
  }

  // string roomName = 2;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), static_cast<int>(this->roomname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.CreatedRoom.roomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->roomname(), output);
  }

  // uint32 players = 3;
  if (this->players() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->players(), output);
  }

  // uint32 maximumNumberOfPlayers = 4;
  if (this->maximumnumberofplayers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maximumnumberofplayers(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:serverMessageSystem.CreatedRoom)
}

::google::protobuf::uint8* CreatedRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serverMessageSystem.CreatedRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 roomID = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roomid(), target);
  }

  // string roomName = 2;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), static_cast<int>(this->roomname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.CreatedRoom.roomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomname(), target);
  }

  // uint32 players = 3;
  if (this->players() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->players(), target);
  }

  // uint32 maximumNumberOfPlayers = 4;
  if (this->maximumnumberofplayers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maximumnumberofplayers(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverMessageSystem.CreatedRoom)
  return target;
}

size_t CreatedRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverMessageSystem.CreatedRoom)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string roomName = 2;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roomname());
  }

  // uint32 roomID = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roomid());
  }

  // uint32 players = 3;
  if (this->players() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->players());
  }

  // uint32 maximumNumberOfPlayers = 4;
  if (this->maximumnumberofplayers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maximumnumberofplayers());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatedRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serverMessageSystem.CreatedRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatedRoom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreatedRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serverMessageSystem.CreatedRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serverMessageSystem.CreatedRoom)
    MergeFrom(*source);
  }
}

void CreatedRoom::MergeFrom(const CreatedRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serverMessageSystem.CreatedRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomname().size() > 0) {

    roomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomname_);
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.players() != 0) {
    set_players(from.players());
  }
  if (from.maximumnumberofplayers() != 0) {
    set_maximumnumberofplayers(from.maximumnumberofplayers());
  }
}

void CreatedRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serverMessageSystem.CreatedRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatedRoom::CopyFrom(const CreatedRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverMessageSystem.CreatedRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatedRoom::IsInitialized() const {
  return true;
}

void CreatedRoom::Swap(CreatedRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreatedRoom::InternalSwap(CreatedRoom* other) {
  using std::swap;
  roomname_.Swap(&other->roomname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(roomid_, other->roomid_);
  swap(players_, other->players_);
  swap(maximumnumberofplayers_, other->maximumnumberofplayers_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CreatedRoom::GetMetadata() const {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerInputQuery::InitAsDefaultInstance() {
  ::serverMessageSystem::_ServerInputQuery_default_instance_._instance.get_mutable()->header_ = const_cast< ::serverMessageSystem::CommonHeader*>(
      ::serverMessageSystem::CommonHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerInputQuery::kHeaderFieldNumber;
const int ServerInputQuery::kConnectionCmdIDFieldNumber;
const int ServerInputQuery::kClientNameFieldNumber;
const int ServerInputQuery::kOsTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerInputQuery::ServerInputQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serverMessageSystem_2eproto::scc_info_ServerInputQuery.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serverMessageSystem.ServerInputQuery)
}
ServerInputQuery::ServerInputQuery(const ServerInputQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientname().size() > 0) {
    clientname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientname_);
  }
  ostype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ostype().size() > 0) {
    ostype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ostype_);
  }
  if (from.has_header()) {
    header_ = new ::serverMessageSystem::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  connectioncmdid_ = from.connectioncmdid_;
  // @@protoc_insertion_point(copy_constructor:serverMessageSystem.ServerInputQuery)
}

void ServerInputQuery::SharedCtor() {
  clientname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ostype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connectioncmdid_) -
      reinterpret_cast<char*>(&header_)) + sizeof(connectioncmdid_));
}

ServerInputQuery::~ServerInputQuery() {
  // @@protoc_insertion_point(destructor:serverMessageSystem.ServerInputQuery)
  SharedDtor();
}

void ServerInputQuery::SharedDtor() {
  clientname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ostype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void ServerInputQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerInputQuery::descriptor() {
  ::protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerInputQuery& ServerInputQuery::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_serverMessageSystem_2eproto::scc_info_ServerInputQuery.base);
  return *internal_default_instance();
}


void ServerInputQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:serverMessageSystem.ServerInputQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ostype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  connectioncmdid_ = 0;
  _internal_metadata_.Clear();
}

bool ServerInputQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serverMessageSystem.ServerInputQuery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .serverMessageSystem.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_connectioncmdid(static_cast< ::serverMessageSystem::ConnectionSubSysCommandsID >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string clientName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientname().data(), static_cast<int>(this->clientname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "serverMessageSystem.ServerInputQuery.clientName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OsType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ostype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ostype().data(), static_cast<int>(this->ostype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "serverMessageSystem.ServerInputQuery.OsType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serverMessageSystem.ServerInputQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serverMessageSystem.ServerInputQuery)
  return false;
#undef DO_
}

void ServerInputQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serverMessageSystem.ServerInputQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->connectioncmdid(), output);
  }

  // string clientName = 3;
  if (this->clientname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientname().data(), static_cast<int>(this->clientname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.ServerInputQuery.clientName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->clientname(), output);
  }

  // string OsType = 4;
  if (this->ostype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ostype().data(), static_cast<int>(this->ostype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.ServerInputQuery.OsType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ostype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:serverMessageSystem.ServerInputQuery)
}

::google::protobuf::uint8* ServerInputQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serverMessageSystem.ServerInputQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->connectioncmdid(), target);
  }

  // string clientName = 3;
  if (this->clientname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientname().data(), static_cast<int>(this->clientname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.ServerInputQuery.clientName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clientname(), target);
  }

  // string OsType = 4;
  if (this->ostype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ostype().data(), static_cast<int>(this->ostype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.ServerInputQuery.OsType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ostype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverMessageSystem.ServerInputQuery)
  return target;
}

size_t ServerInputQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverMessageSystem.ServerInputQuery)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string clientName = 3;
  if (this->clientname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientname());
  }

  // string OsType = 4;
  if (this->ostype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ostype());
  }

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectioncmdid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerInputQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serverMessageSystem.ServerInputQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInputQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerInputQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serverMessageSystem.ServerInputQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serverMessageSystem.ServerInputQuery)
    MergeFrom(*source);
  }
}

void ServerInputQuery::MergeFrom(const ServerInputQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serverMessageSystem.ServerInputQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientname().size() > 0) {

    clientname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientname_);
  }
  if (from.ostype().size() > 0) {

    ostype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ostype_);
  }
  if (from.has_header()) {
    mutable_header()->::serverMessageSystem::CommonHeader::MergeFrom(from.header());
  }
  if (from.connectioncmdid() != 0) {
    set_connectioncmdid(from.connectioncmdid());
  }
}

void ServerInputQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serverMessageSystem.ServerInputQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInputQuery::CopyFrom(const ServerInputQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverMessageSystem.ServerInputQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInputQuery::IsInitialized() const {
  return true;
}

void ServerInputQuery::Swap(ServerInputQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerInputQuery::InternalSwap(ServerInputQuery* other) {
  using std::swap;
  clientname_.Swap(&other->clientname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ostype_.Swap(&other->ostype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(connectioncmdid_, other->connectioncmdid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerInputQuery::GetMetadata() const {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerQueryReply::InitAsDefaultInstance() {
  ::serverMessageSystem::_ServerQueryReply_default_instance_._instance.get_mutable()->header_ = const_cast< ::serverMessageSystem::CommonHeader*>(
      ::serverMessageSystem::CommonHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerQueryReply::kHeaderFieldNumber;
const int ServerQueryReply::kConnectionCmdIDFieldNumber;
const int ServerQueryReply::kRoomCreationAllowedFieldNumber;
const int ServerQueryReply::kConnectionToRoomAllowedFieldNumber;
const int ServerQueryReply::kServerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerQueryReply::ServerQueryReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serverMessageSystem_2eproto::scc_info_ServerQueryReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serverMessageSystem.ServerQueryReply)
}
ServerQueryReply::ServerQueryReply(const ServerQueryReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  servername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.servername().size() > 0) {
    servername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servername_);
  }
  if (from.has_header()) {
    header_ = new ::serverMessageSystem::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&connectioncmdid_, &from.connectioncmdid_,
    static_cast<size_t>(reinterpret_cast<char*>(&connectiontoroomallowed_) -
    reinterpret_cast<char*>(&connectioncmdid_)) + sizeof(connectiontoroomallowed_));
  // @@protoc_insertion_point(copy_constructor:serverMessageSystem.ServerQueryReply)
}

void ServerQueryReply::SharedCtor() {
  servername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connectiontoroomallowed_) -
      reinterpret_cast<char*>(&header_)) + sizeof(connectiontoroomallowed_));
}

ServerQueryReply::~ServerQueryReply() {
  // @@protoc_insertion_point(destructor:serverMessageSystem.ServerQueryReply)
  SharedDtor();
}

void ServerQueryReply::SharedDtor() {
  servername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void ServerQueryReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerQueryReply::descriptor() {
  ::protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerQueryReply& ServerQueryReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_serverMessageSystem_2eproto::scc_info_ServerQueryReply.base);
  return *internal_default_instance();
}


void ServerQueryReply::Clear() {
// @@protoc_insertion_point(message_clear_start:serverMessageSystem.ServerQueryReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&connectioncmdid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connectiontoroomallowed_) -
      reinterpret_cast<char*>(&connectioncmdid_)) + sizeof(connectiontoroomallowed_));
  _internal_metadata_.Clear();
}

bool ServerQueryReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serverMessageSystem.ServerQueryReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .serverMessageSystem.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_connectioncmdid(static_cast< ::serverMessageSystem::ConnectionSubSysCommandsID >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool roomCreationAllowed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &roomcreationallowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool connectionToRoomAllowed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connectiontoroomallowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serverName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->servername().data(), static_cast<int>(this->servername().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "serverMessageSystem.ServerQueryReply.serverName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serverMessageSystem.ServerQueryReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serverMessageSystem.ServerQueryReply)
  return false;
#undef DO_
}

void ServerQueryReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serverMessageSystem.ServerQueryReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->connectioncmdid(), output);
  }

  // bool roomCreationAllowed = 3;
  if (this->roomcreationallowed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->roomcreationallowed(), output);
  }

  // bool connectionToRoomAllowed = 4;
  if (this->connectiontoroomallowed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->connectiontoroomallowed(), output);
  }

  // string serverName = 5;
  if (this->servername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servername().data(), static_cast<int>(this->servername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.ServerQueryReply.serverName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->servername(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:serverMessageSystem.ServerQueryReply)
}

::google::protobuf::uint8* ServerQueryReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serverMessageSystem.ServerQueryReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->connectioncmdid(), target);
  }

  // bool roomCreationAllowed = 3;
  if (this->roomcreationallowed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->roomcreationallowed(), target);
  }

  // bool connectionToRoomAllowed = 4;
  if (this->connectiontoroomallowed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->connectiontoroomallowed(), target);
  }

  // string serverName = 5;
  if (this->servername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servername().data(), static_cast<int>(this->servername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.ServerQueryReply.serverName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->servername(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverMessageSystem.ServerQueryReply)
  return target;
}

size_t ServerQueryReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverMessageSystem.ServerQueryReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string serverName = 5;
  if (this->servername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servername());
  }

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectioncmdid());
  }

  // bool roomCreationAllowed = 3;
  if (this->roomcreationallowed() != 0) {
    total_size += 1 + 1;
  }

  // bool connectionToRoomAllowed = 4;
  if (this->connectiontoroomallowed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerQueryReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serverMessageSystem.ServerQueryReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerQueryReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerQueryReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serverMessageSystem.ServerQueryReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serverMessageSystem.ServerQueryReply)
    MergeFrom(*source);
  }
}

void ServerQueryReply::MergeFrom(const ServerQueryReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serverMessageSystem.ServerQueryReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servername().size() > 0) {

    servername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servername_);
  }
  if (from.has_header()) {
    mutable_header()->::serverMessageSystem::CommonHeader::MergeFrom(from.header());
  }
  if (from.connectioncmdid() != 0) {
    set_connectioncmdid(from.connectioncmdid());
  }
  if (from.roomcreationallowed() != 0) {
    set_roomcreationallowed(from.roomcreationallowed());
  }
  if (from.connectiontoroomallowed() != 0) {
    set_connectiontoroomallowed(from.connectiontoroomallowed());
  }
}

void ServerQueryReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serverMessageSystem.ServerQueryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerQueryReply::CopyFrom(const ServerQueryReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverMessageSystem.ServerQueryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerQueryReply::IsInitialized() const {
  return true;
}

void ServerQueryReply::Swap(ServerQueryReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerQueryReply::InternalSwap(ServerQueryReply* other) {
  using std::swap;
  servername_.Swap(&other->servername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(connectioncmdid_, other->connectioncmdid_);
  swap(roomcreationallowed_, other->roomcreationallowed_);
  swap(connectiontoroomallowed_, other->connectiontoroomallowed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerQueryReply::GetMetadata() const {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientRoomCreationRequest::InitAsDefaultInstance() {
  ::serverMessageSystem::_ClientRoomCreationRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::serverMessageSystem::CommonHeader*>(
      ::serverMessageSystem::CommonHeader::internal_default_instance());
  ::serverMessageSystem::_ClientRoomCreationRequest_default_instance_._instance.get_mutable()->gamesettings_ = const_cast< ::serverMessageSystem::GameSettings*>(
      ::serverMessageSystem::GameSettings::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientRoomCreationRequest::kHeaderFieldNumber;
const int ClientRoomCreationRequest::kConnectionCmdIDFieldNumber;
const int ClientRoomCreationRequest::kClientNameFieldNumber;
const int ClientRoomCreationRequest::kRoomNameFieldNumber;
const int ClientRoomCreationRequest::kGameSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientRoomCreationRequest::ClientRoomCreationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serverMessageSystem_2eproto::scc_info_ClientRoomCreationRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serverMessageSystem.ClientRoomCreationRequest)
}
ClientRoomCreationRequest::ClientRoomCreationRequest(const ClientRoomCreationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientname().size() > 0) {
    clientname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientname_);
  }
  roomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.roomname().size() > 0) {
    roomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomname_);
  }
  if (from.has_header()) {
    header_ = new ::serverMessageSystem::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_gamesettings()) {
    gamesettings_ = new ::serverMessageSystem::GameSettings(*from.gamesettings_);
  } else {
    gamesettings_ = NULL;
  }
  connectioncmdid_ = from.connectioncmdid_;
  // @@protoc_insertion_point(copy_constructor:serverMessageSystem.ClientRoomCreationRequest)
}

void ClientRoomCreationRequest::SharedCtor() {
  clientname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connectioncmdid_) -
      reinterpret_cast<char*>(&header_)) + sizeof(connectioncmdid_));
}

ClientRoomCreationRequest::~ClientRoomCreationRequest() {
  // @@protoc_insertion_point(destructor:serverMessageSystem.ClientRoomCreationRequest)
  SharedDtor();
}

void ClientRoomCreationRequest::SharedDtor() {
  clientname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete gamesettings_;
}

void ClientRoomCreationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientRoomCreationRequest::descriptor() {
  ::protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientRoomCreationRequest& ClientRoomCreationRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_serverMessageSystem_2eproto::scc_info_ClientRoomCreationRequest.base);
  return *internal_default_instance();
}


void ClientRoomCreationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:serverMessageSystem.ClientRoomCreationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && gamesettings_ != NULL) {
    delete gamesettings_;
  }
  gamesettings_ = NULL;
  connectioncmdid_ = 0;
  _internal_metadata_.Clear();
}

bool ClientRoomCreationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serverMessageSystem.ClientRoomCreationRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .serverMessageSystem.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_connectioncmdid(static_cast< ::serverMessageSystem::ConnectionSubSysCommandsID >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string clientName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientname().data(), static_cast<int>(this->clientname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "serverMessageSystem.ClientRoomCreationRequest.clientName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string roomName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roomname().data(), static_cast<int>(this->roomname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "serverMessageSystem.ClientRoomCreationRequest.roomName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .serverMessageSystem.GameSettings gameSettings = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gamesettings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serverMessageSystem.ClientRoomCreationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serverMessageSystem.ClientRoomCreationRequest)
  return false;
#undef DO_
}

void ClientRoomCreationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serverMessageSystem.ClientRoomCreationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->connectioncmdid(), output);
  }

  // string clientName = 3;
  if (this->clientname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientname().data(), static_cast<int>(this->clientname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.ClientRoomCreationRequest.clientName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->clientname(), output);
  }

  // string roomName = 4;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), static_cast<int>(this->roomname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.ClientRoomCreationRequest.roomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->roomname(), output);
  }

  // .serverMessageSystem.GameSettings gameSettings = 5;
  if (this->has_gamesettings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_gamesettings(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:serverMessageSystem.ClientRoomCreationRequest)
}

::google::protobuf::uint8* ClientRoomCreationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serverMessageSystem.ClientRoomCreationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->connectioncmdid(), target);
  }

  // string clientName = 3;
  if (this->clientname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientname().data(), static_cast<int>(this->clientname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.ClientRoomCreationRequest.clientName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clientname(), target);
  }

  // string roomName = 4;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), static_cast<int>(this->roomname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.ClientRoomCreationRequest.roomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->roomname(), target);
  }

  // .serverMessageSystem.GameSettings gameSettings = 5;
  if (this->has_gamesettings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_gamesettings(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverMessageSystem.ClientRoomCreationRequest)
  return target;
}

size_t ClientRoomCreationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverMessageSystem.ClientRoomCreationRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string clientName = 3;
  if (this->clientname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientname());
  }

  // string roomName = 4;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roomname());
  }

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .serverMessageSystem.GameSettings gameSettings = 5;
  if (this->has_gamesettings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gamesettings_);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectioncmdid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientRoomCreationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serverMessageSystem.ClientRoomCreationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientRoomCreationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientRoomCreationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serverMessageSystem.ClientRoomCreationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serverMessageSystem.ClientRoomCreationRequest)
    MergeFrom(*source);
  }
}

void ClientRoomCreationRequest::MergeFrom(const ClientRoomCreationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serverMessageSystem.ClientRoomCreationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientname().size() > 0) {

    clientname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientname_);
  }
  if (from.roomname().size() > 0) {

    roomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomname_);
  }
  if (from.has_header()) {
    mutable_header()->::serverMessageSystem::CommonHeader::MergeFrom(from.header());
  }
  if (from.has_gamesettings()) {
    mutable_gamesettings()->::serverMessageSystem::GameSettings::MergeFrom(from.gamesettings());
  }
  if (from.connectioncmdid() != 0) {
    set_connectioncmdid(from.connectioncmdid());
  }
}

void ClientRoomCreationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serverMessageSystem.ClientRoomCreationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRoomCreationRequest::CopyFrom(const ClientRoomCreationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverMessageSystem.ClientRoomCreationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRoomCreationRequest::IsInitialized() const {
  return true;
}

void ClientRoomCreationRequest::Swap(ClientRoomCreationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientRoomCreationRequest::InternalSwap(ClientRoomCreationRequest* other) {
  using std::swap;
  clientname_.Swap(&other->clientname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  roomname_.Swap(&other->roomname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(gamesettings_, other->gamesettings_);
  swap(connectioncmdid_, other->connectioncmdid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientRoomCreationRequest::GetMetadata() const {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientRoomCreationReply::InitAsDefaultInstance() {
  ::serverMessageSystem::_ClientRoomCreationReply_default_instance_._instance.get_mutable()->header_ = const_cast< ::serverMessageSystem::CommonHeader*>(
      ::serverMessageSystem::CommonHeader::internal_default_instance());
  ::serverMessageSystem::_ClientRoomCreationReply_default_instance_._instance.get_mutable()->roomcreationerrors_ = const_cast< ::serverMessageSystem::RoomCreationErrors*>(
      ::serverMessageSystem::RoomCreationErrors::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientRoomCreationReply::kHeaderFieldNumber;
const int ClientRoomCreationReply::kConnectionCmdIDFieldNumber;
const int ClientRoomCreationReply::kConnectionAllowedFieldNumber;
const int ClientRoomCreationReply::kSlotIDFieldNumber;
const int ClientRoomCreationReply::kFreeSlotsLeftFieldNumber;
const int ClientRoomCreationReply::kRoomCreationErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientRoomCreationReply::ClientRoomCreationReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serverMessageSystem_2eproto::scc_info_ClientRoomCreationReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serverMessageSystem.ClientRoomCreationReply)
}
ClientRoomCreationReply::ClientRoomCreationReply(const ClientRoomCreationReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::serverMessageSystem::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_roomcreationerrors()) {
    roomcreationerrors_ = new ::serverMessageSystem::RoomCreationErrors(*from.roomcreationerrors_);
  } else {
    roomcreationerrors_ = NULL;
  }
  ::memcpy(&connectioncmdid_, &from.connectioncmdid_,
    static_cast<size_t>(reinterpret_cast<char*>(&freeslotsleft_) -
    reinterpret_cast<char*>(&connectioncmdid_)) + sizeof(freeslotsleft_));
  // @@protoc_insertion_point(copy_constructor:serverMessageSystem.ClientRoomCreationReply)
}

void ClientRoomCreationReply::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&freeslotsleft_) -
      reinterpret_cast<char*>(&header_)) + sizeof(freeslotsleft_));
}

ClientRoomCreationReply::~ClientRoomCreationReply() {
  // @@protoc_insertion_point(destructor:serverMessageSystem.ClientRoomCreationReply)
  SharedDtor();
}

void ClientRoomCreationReply::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete roomcreationerrors_;
}

void ClientRoomCreationReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientRoomCreationReply::descriptor() {
  ::protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientRoomCreationReply& ClientRoomCreationReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_serverMessageSystem_2eproto::scc_info_ClientRoomCreationReply.base);
  return *internal_default_instance();
}


void ClientRoomCreationReply::Clear() {
// @@protoc_insertion_point(message_clear_start:serverMessageSystem.ClientRoomCreationReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && roomcreationerrors_ != NULL) {
    delete roomcreationerrors_;
  }
  roomcreationerrors_ = NULL;
  ::memset(&connectioncmdid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&freeslotsleft_) -
      reinterpret_cast<char*>(&connectioncmdid_)) + sizeof(freeslotsleft_));
  _internal_metadata_.Clear();
}

bool ClientRoomCreationReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serverMessageSystem.ClientRoomCreationReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .serverMessageSystem.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_connectioncmdid(static_cast< ::serverMessageSystem::ConnectionSubSysCommandsID >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool connectionAllowed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connectionallowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 slotID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slotid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 freeSlotsLeft = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freeslotsleft_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .serverMessageSystem.RoomCreationErrors roomCreationErrors = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roomcreationerrors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serverMessageSystem.ClientRoomCreationReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serverMessageSystem.ClientRoomCreationReply)
  return false;
#undef DO_
}

void ClientRoomCreationReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serverMessageSystem.ClientRoomCreationReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->connectioncmdid(), output);
  }

  // bool connectionAllowed = 3;
  if (this->connectionallowed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->connectionallowed(), output);
  }

  // uint32 slotID = 4;
  if (this->slotid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->slotid(), output);
  }

  // uint32 freeSlotsLeft = 5;
  if (this->freeslotsleft() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->freeslotsleft(), output);
  }

  // .serverMessageSystem.RoomCreationErrors roomCreationErrors = 6;
  if (this->has_roomcreationerrors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_roomcreationerrors(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:serverMessageSystem.ClientRoomCreationReply)
}

::google::protobuf::uint8* ClientRoomCreationReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serverMessageSystem.ClientRoomCreationReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->connectioncmdid(), target);
  }

  // bool connectionAllowed = 3;
  if (this->connectionallowed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->connectionallowed(), target);
  }

  // uint32 slotID = 4;
  if (this->slotid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->slotid(), target);
  }

  // uint32 freeSlotsLeft = 5;
  if (this->freeslotsleft() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->freeslotsleft(), target);
  }

  // .serverMessageSystem.RoomCreationErrors roomCreationErrors = 6;
  if (this->has_roomcreationerrors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_roomcreationerrors(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverMessageSystem.ClientRoomCreationReply)
  return target;
}

size_t ClientRoomCreationReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverMessageSystem.ClientRoomCreationReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .serverMessageSystem.RoomCreationErrors roomCreationErrors = 6;
  if (this->has_roomcreationerrors()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *roomcreationerrors_);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectioncmdid());
  }

  // bool connectionAllowed = 3;
  if (this->connectionallowed() != 0) {
    total_size += 1 + 1;
  }

  // uint32 slotID = 4;
  if (this->slotid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slotid());
  }

  // uint32 freeSlotsLeft = 5;
  if (this->freeslotsleft() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->freeslotsleft());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientRoomCreationReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serverMessageSystem.ClientRoomCreationReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientRoomCreationReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientRoomCreationReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serverMessageSystem.ClientRoomCreationReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serverMessageSystem.ClientRoomCreationReply)
    MergeFrom(*source);
  }
}

void ClientRoomCreationReply::MergeFrom(const ClientRoomCreationReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serverMessageSystem.ClientRoomCreationReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::serverMessageSystem::CommonHeader::MergeFrom(from.header());
  }
  if (from.has_roomcreationerrors()) {
    mutable_roomcreationerrors()->::serverMessageSystem::RoomCreationErrors::MergeFrom(from.roomcreationerrors());
  }
  if (from.connectioncmdid() != 0) {
    set_connectioncmdid(from.connectioncmdid());
  }
  if (from.connectionallowed() != 0) {
    set_connectionallowed(from.connectionallowed());
  }
  if (from.slotid() != 0) {
    set_slotid(from.slotid());
  }
  if (from.freeslotsleft() != 0) {
    set_freeslotsleft(from.freeslotsleft());
  }
}

void ClientRoomCreationReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serverMessageSystem.ClientRoomCreationReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRoomCreationReply::CopyFrom(const ClientRoomCreationReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverMessageSystem.ClientRoomCreationReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRoomCreationReply::IsInitialized() const {
  return true;
}

void ClientRoomCreationReply::Swap(ClientRoomCreationReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientRoomCreationReply::InternalSwap(ClientRoomCreationReply* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(roomcreationerrors_, other->roomcreationerrors_);
  swap(connectioncmdid_, other->connectioncmdid_);
  swap(connectionallowed_, other->connectionallowed_);
  swap(slotid_, other->slotid_);
  swap(freeslotsleft_, other->freeslotsleft_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientRoomCreationReply::GetMetadata() const {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientConnectionToRoomRequest::InitAsDefaultInstance() {
  ::serverMessageSystem::_ClientConnectionToRoomRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::serverMessageSystem::CommonHeader*>(
      ::serverMessageSystem::CommonHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientConnectionToRoomRequest::kHeaderFieldNumber;
const int ClientConnectionToRoomRequest::kConnectionCmdIDFieldNumber;
const int ClientConnectionToRoomRequest::kClientNameFieldNumber;
const int ClientConnectionToRoomRequest::kConnectToAnyRoomFieldNumber;
const int ClientConnectionToRoomRequest::kAgreeToWaitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientConnectionToRoomRequest::ClientConnectionToRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serverMessageSystem_2eproto::scc_info_ClientConnectionToRoomRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serverMessageSystem.ClientConnectionToRoomRequest)
}
ClientConnectionToRoomRequest::ClientConnectionToRoomRequest(const ClientConnectionToRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientname().size() > 0) {
    clientname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientname_);
  }
  if (from.has_header()) {
    header_ = new ::serverMessageSystem::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&connectioncmdid_, &from.connectioncmdid_,
    static_cast<size_t>(reinterpret_cast<char*>(&agreetowait_) -
    reinterpret_cast<char*>(&connectioncmdid_)) + sizeof(agreetowait_));
  // @@protoc_insertion_point(copy_constructor:serverMessageSystem.ClientConnectionToRoomRequest)
}

void ClientConnectionToRoomRequest::SharedCtor() {
  clientname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&agreetowait_) -
      reinterpret_cast<char*>(&header_)) + sizeof(agreetowait_));
}

ClientConnectionToRoomRequest::~ClientConnectionToRoomRequest() {
  // @@protoc_insertion_point(destructor:serverMessageSystem.ClientConnectionToRoomRequest)
  SharedDtor();
}

void ClientConnectionToRoomRequest::SharedDtor() {
  clientname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void ClientConnectionToRoomRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientConnectionToRoomRequest::descriptor() {
  ::protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientConnectionToRoomRequest& ClientConnectionToRoomRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_serverMessageSystem_2eproto::scc_info_ClientConnectionToRoomRequest.base);
  return *internal_default_instance();
}


void ClientConnectionToRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:serverMessageSystem.ClientConnectionToRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&connectioncmdid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&agreetowait_) -
      reinterpret_cast<char*>(&connectioncmdid_)) + sizeof(agreetowait_));
  _internal_metadata_.Clear();
}

bool ClientConnectionToRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serverMessageSystem.ClientConnectionToRoomRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .serverMessageSystem.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_connectioncmdid(static_cast< ::serverMessageSystem::ConnectionSubSysCommandsID >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string clientName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientname().data(), static_cast<int>(this->clientname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "serverMessageSystem.ClientConnectionToRoomRequest.clientName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool connectToAnyRoom = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connecttoanyroom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool agreeToWait = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agreetowait_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serverMessageSystem.ClientConnectionToRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serverMessageSystem.ClientConnectionToRoomRequest)
  return false;
#undef DO_
}

void ClientConnectionToRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serverMessageSystem.ClientConnectionToRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->connectioncmdid(), output);
  }

  // string clientName = 3;
  if (this->clientname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientname().data(), static_cast<int>(this->clientname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.ClientConnectionToRoomRequest.clientName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->clientname(), output);
  }

  // bool connectToAnyRoom = 4;
  if (this->connecttoanyroom() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->connecttoanyroom(), output);
  }

  // bool agreeToWait = 5;
  if (this->agreetowait() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->agreetowait(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:serverMessageSystem.ClientConnectionToRoomRequest)
}

::google::protobuf::uint8* ClientConnectionToRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serverMessageSystem.ClientConnectionToRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->connectioncmdid(), target);
  }

  // string clientName = 3;
  if (this->clientname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientname().data(), static_cast<int>(this->clientname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.ClientConnectionToRoomRequest.clientName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clientname(), target);
  }

  // bool connectToAnyRoom = 4;
  if (this->connecttoanyroom() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->connecttoanyroom(), target);
  }

  // bool agreeToWait = 5;
  if (this->agreetowait() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->agreetowait(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverMessageSystem.ClientConnectionToRoomRequest)
  return target;
}

size_t ClientConnectionToRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverMessageSystem.ClientConnectionToRoomRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string clientName = 3;
  if (this->clientname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientname());
  }

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectioncmdid());
  }

  // bool connectToAnyRoom = 4;
  if (this->connecttoanyroom() != 0) {
    total_size += 1 + 1;
  }

  // bool agreeToWait = 5;
  if (this->agreetowait() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientConnectionToRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serverMessageSystem.ClientConnectionToRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientConnectionToRoomRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientConnectionToRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serverMessageSystem.ClientConnectionToRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serverMessageSystem.ClientConnectionToRoomRequest)
    MergeFrom(*source);
  }
}

void ClientConnectionToRoomRequest::MergeFrom(const ClientConnectionToRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serverMessageSystem.ClientConnectionToRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientname().size() > 0) {

    clientname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientname_);
  }
  if (from.has_header()) {
    mutable_header()->::serverMessageSystem::CommonHeader::MergeFrom(from.header());
  }
  if (from.connectioncmdid() != 0) {
    set_connectioncmdid(from.connectioncmdid());
  }
  if (from.connecttoanyroom() != 0) {
    set_connecttoanyroom(from.connecttoanyroom());
  }
  if (from.agreetowait() != 0) {
    set_agreetowait(from.agreetowait());
  }
}

void ClientConnectionToRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serverMessageSystem.ClientConnectionToRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientConnectionToRoomRequest::CopyFrom(const ClientConnectionToRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverMessageSystem.ClientConnectionToRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientConnectionToRoomRequest::IsInitialized() const {
  return true;
}

void ClientConnectionToRoomRequest::Swap(ClientConnectionToRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientConnectionToRoomRequest::InternalSwap(ClientConnectionToRoomRequest* other) {
  using std::swap;
  clientname_.Swap(&other->clientname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(connectioncmdid_, other->connectioncmdid_);
  swap(connecttoanyroom_, other->connecttoanyroom_);
  swap(agreetowait_, other->agreetowait_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientConnectionToRoomRequest::GetMetadata() const {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientConnectionToRoomReply::InitAsDefaultInstance() {
  ::serverMessageSystem::_ClientConnectionToRoomReply_default_instance_._instance.get_mutable()->header_ = const_cast< ::serverMessageSystem::CommonHeader*>(
      ::serverMessageSystem::CommonHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientConnectionToRoomReply::kHeaderFieldNumber;
const int ClientConnectionToRoomReply::kConnectionCmdIDFieldNumber;
const int ClientConnectionToRoomReply::kNoRoomsAvailableFieldNumber;
const int ClientConnectionToRoomReply::kFreeSlotsLeftFieldNumber;
const int ClientConnectionToRoomReply::kRoomFieldNumber;
const int ClientConnectionToRoomReply::kQueryOrderFieldNumber;
const int ClientConnectionToRoomReply::kQuerySizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientConnectionToRoomReply::ClientConnectionToRoomReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serverMessageSystem_2eproto::scc_info_ClientConnectionToRoomReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serverMessageSystem.ClientConnectionToRoomReply)
}
ClientConnectionToRoomReply::ClientConnectionToRoomReply(const ClientConnectionToRoomReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      room_(from.room_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::serverMessageSystem::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&connectioncmdid_, &from.connectioncmdid_,
    static_cast<size_t>(reinterpret_cast<char*>(&querysize_) -
    reinterpret_cast<char*>(&connectioncmdid_)) + sizeof(querysize_));
  // @@protoc_insertion_point(copy_constructor:serverMessageSystem.ClientConnectionToRoomReply)
}

void ClientConnectionToRoomReply::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&querysize_) -
      reinterpret_cast<char*>(&header_)) + sizeof(querysize_));
}

ClientConnectionToRoomReply::~ClientConnectionToRoomReply() {
  // @@protoc_insertion_point(destructor:serverMessageSystem.ClientConnectionToRoomReply)
  SharedDtor();
}

void ClientConnectionToRoomReply::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ClientConnectionToRoomReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientConnectionToRoomReply::descriptor() {
  ::protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientConnectionToRoomReply& ClientConnectionToRoomReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_serverMessageSystem_2eproto::scc_info_ClientConnectionToRoomReply.base);
  return *internal_default_instance();
}


void ClientConnectionToRoomReply::Clear() {
// @@protoc_insertion_point(message_clear_start:serverMessageSystem.ClientConnectionToRoomReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&connectioncmdid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&querysize_) -
      reinterpret_cast<char*>(&connectioncmdid_)) + sizeof(querysize_));
  _internal_metadata_.Clear();
}

bool ClientConnectionToRoomReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serverMessageSystem.ClientConnectionToRoomReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .serverMessageSystem.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_connectioncmdid(static_cast< ::serverMessageSystem::ConnectionSubSysCommandsID >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool noRoomsAvailable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &noroomsavailable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 freeSlotsLeft = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freeslotsleft_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .serverMessageSystem.CreatedRoom room = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 queryOrder = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queryorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 querySize = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &querysize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serverMessageSystem.ClientConnectionToRoomReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serverMessageSystem.ClientConnectionToRoomReply)
  return false;
#undef DO_
}

void ClientConnectionToRoomReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serverMessageSystem.ClientConnectionToRoomReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->connectioncmdid(), output);
  }

  // bool noRoomsAvailable = 3;
  if (this->noroomsavailable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->noroomsavailable(), output);
  }

  // uint32 freeSlotsLeft = 4;
  if (this->freeslotsleft() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->freeslotsleft(), output);
  }

  // repeated .serverMessageSystem.CreatedRoom room = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->room_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->room(static_cast<int>(i)),
      output);
  }

  // uint32 queryOrder = 6;
  if (this->queryorder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->queryorder(), output);
  }

  // uint32 querySize = 7;
  if (this->querysize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->querysize(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:serverMessageSystem.ClientConnectionToRoomReply)
}

::google::protobuf::uint8* ClientConnectionToRoomReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serverMessageSystem.ClientConnectionToRoomReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->connectioncmdid(), target);
  }

  // bool noRoomsAvailable = 3;
  if (this->noroomsavailable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->noroomsavailable(), target);
  }

  // uint32 freeSlotsLeft = 4;
  if (this->freeslotsleft() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->freeslotsleft(), target);
  }

  // repeated .serverMessageSystem.CreatedRoom room = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->room_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->room(static_cast<int>(i)), deterministic, target);
  }

  // uint32 queryOrder = 6;
  if (this->queryorder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->queryorder(), target);
  }

  // uint32 querySize = 7;
  if (this->querysize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->querysize(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverMessageSystem.ClientConnectionToRoomReply)
  return target;
}

size_t ClientConnectionToRoomReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverMessageSystem.ClientConnectionToRoomReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .serverMessageSystem.CreatedRoom room = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->room_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->room(static_cast<int>(i)));
    }
  }

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectioncmdid());
  }

  // bool noRoomsAvailable = 3;
  if (this->noroomsavailable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 freeSlotsLeft = 4;
  if (this->freeslotsleft() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->freeslotsleft());
  }

  // uint32 queryOrder = 6;
  if (this->queryorder() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->queryorder());
  }

  // uint32 querySize = 7;
  if (this->querysize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->querysize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientConnectionToRoomReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serverMessageSystem.ClientConnectionToRoomReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientConnectionToRoomReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientConnectionToRoomReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serverMessageSystem.ClientConnectionToRoomReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serverMessageSystem.ClientConnectionToRoomReply)
    MergeFrom(*source);
  }
}

void ClientConnectionToRoomReply::MergeFrom(const ClientConnectionToRoomReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serverMessageSystem.ClientConnectionToRoomReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  room_.MergeFrom(from.room_);
  if (from.has_header()) {
    mutable_header()->::serverMessageSystem::CommonHeader::MergeFrom(from.header());
  }
  if (from.connectioncmdid() != 0) {
    set_connectioncmdid(from.connectioncmdid());
  }
  if (from.noroomsavailable() != 0) {
    set_noroomsavailable(from.noroomsavailable());
  }
  if (from.freeslotsleft() != 0) {
    set_freeslotsleft(from.freeslotsleft());
  }
  if (from.queryorder() != 0) {
    set_queryorder(from.queryorder());
  }
  if (from.querysize() != 0) {
    set_querysize(from.querysize());
  }
}

void ClientConnectionToRoomReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serverMessageSystem.ClientConnectionToRoomReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientConnectionToRoomReply::CopyFrom(const ClientConnectionToRoomReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverMessageSystem.ClientConnectionToRoomReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientConnectionToRoomReply::IsInitialized() const {
  return true;
}

void ClientConnectionToRoomReply::Swap(ClientConnectionToRoomReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientConnectionToRoomReply::InternalSwap(ClientConnectionToRoomReply* other) {
  using std::swap;
  CastToBase(&room_)->InternalSwap(CastToBase(&other->room_));
  swap(header_, other->header_);
  swap(connectioncmdid_, other->connectioncmdid_);
  swap(noroomsavailable_, other->noroomsavailable_);
  swap(freeslotsleft_, other->freeslotsleft_);
  swap(queryorder_, other->queryorder_);
  swap(querysize_, other->querysize_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientConnectionToRoomReply::GetMetadata() const {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerQueryOrderNotification::InitAsDefaultInstance() {
  ::serverMessageSystem::_ServerQueryOrderNotification_default_instance_._instance.get_mutable()->header_ = const_cast< ::serverMessageSystem::CommonHeader*>(
      ::serverMessageSystem::CommonHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerQueryOrderNotification::kHeaderFieldNumber;
const int ServerQueryOrderNotification::kConnectionCmdIDFieldNumber;
const int ServerQueryOrderNotification::kQueryOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerQueryOrderNotification::ServerQueryOrderNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serverMessageSystem_2eproto::scc_info_ServerQueryOrderNotification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serverMessageSystem.ServerQueryOrderNotification)
}
ServerQueryOrderNotification::ServerQueryOrderNotification(const ServerQueryOrderNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::serverMessageSystem::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&connectioncmdid_, &from.connectioncmdid_,
    static_cast<size_t>(reinterpret_cast<char*>(&queryorder_) -
    reinterpret_cast<char*>(&connectioncmdid_)) + sizeof(queryorder_));
  // @@protoc_insertion_point(copy_constructor:serverMessageSystem.ServerQueryOrderNotification)
}

void ServerQueryOrderNotification::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queryorder_) -
      reinterpret_cast<char*>(&header_)) + sizeof(queryorder_));
}

ServerQueryOrderNotification::~ServerQueryOrderNotification() {
  // @@protoc_insertion_point(destructor:serverMessageSystem.ServerQueryOrderNotification)
  SharedDtor();
}

void ServerQueryOrderNotification::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ServerQueryOrderNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerQueryOrderNotification::descriptor() {
  ::protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerQueryOrderNotification& ServerQueryOrderNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_serverMessageSystem_2eproto::scc_info_ServerQueryOrderNotification.base);
  return *internal_default_instance();
}


void ServerQueryOrderNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:serverMessageSystem.ServerQueryOrderNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&connectioncmdid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queryorder_) -
      reinterpret_cast<char*>(&connectioncmdid_)) + sizeof(queryorder_));
  _internal_metadata_.Clear();
}

bool ServerQueryOrderNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serverMessageSystem.ServerQueryOrderNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .serverMessageSystem.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_connectioncmdid(static_cast< ::serverMessageSystem::ConnectionSubSysCommandsID >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 queryOrder = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queryorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serverMessageSystem.ServerQueryOrderNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serverMessageSystem.ServerQueryOrderNotification)
  return false;
#undef DO_
}

void ServerQueryOrderNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serverMessageSystem.ServerQueryOrderNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->connectioncmdid(), output);
  }

  // uint32 queryOrder = 3;
  if (this->queryorder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->queryorder(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:serverMessageSystem.ServerQueryOrderNotification)
}

::google::protobuf::uint8* ServerQueryOrderNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serverMessageSystem.ServerQueryOrderNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->connectioncmdid(), target);
  }

  // uint32 queryOrder = 3;
  if (this->queryorder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->queryorder(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverMessageSystem.ServerQueryOrderNotification)
  return target;
}

size_t ServerQueryOrderNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverMessageSystem.ServerQueryOrderNotification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectioncmdid());
  }

  // uint32 queryOrder = 3;
  if (this->queryorder() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->queryorder());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerQueryOrderNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serverMessageSystem.ServerQueryOrderNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerQueryOrderNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerQueryOrderNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serverMessageSystem.ServerQueryOrderNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serverMessageSystem.ServerQueryOrderNotification)
    MergeFrom(*source);
  }
}

void ServerQueryOrderNotification::MergeFrom(const ServerQueryOrderNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serverMessageSystem.ServerQueryOrderNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::serverMessageSystem::CommonHeader::MergeFrom(from.header());
  }
  if (from.connectioncmdid() != 0) {
    set_connectioncmdid(from.connectioncmdid());
  }
  if (from.queryorder() != 0) {
    set_queryorder(from.queryorder());
  }
}

void ServerQueryOrderNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serverMessageSystem.ServerQueryOrderNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerQueryOrderNotification::CopyFrom(const ServerQueryOrderNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverMessageSystem.ServerQueryOrderNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerQueryOrderNotification::IsInitialized() const {
  return true;
}

void ServerQueryOrderNotification::Swap(ServerQueryOrderNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerQueryOrderNotification::InternalSwap(ServerQueryOrderNotification* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(connectioncmdid_, other->connectioncmdid_);
  swap(queryorder_, other->queryorder_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerQueryOrderNotification::GetMetadata() const {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerReportsOpponentIsEnteringRoom::InitAsDefaultInstance() {
  ::serverMessageSystem::_ServerReportsOpponentIsEnteringRoom_default_instance_._instance.get_mutable()->header_ = const_cast< ::serverMessageSystem::CommonHeader*>(
      ::serverMessageSystem::CommonHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerReportsOpponentIsEnteringRoom::kHeaderFieldNumber;
const int ServerReportsOpponentIsEnteringRoom::kConnectionCmdIDFieldNumber;
const int ServerReportsOpponentIsEnteringRoom::kOpponentNameFieldNumber;
const int ServerReportsOpponentIsEnteringRoom::kRoomIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerReportsOpponentIsEnteringRoom::ServerReportsOpponentIsEnteringRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serverMessageSystem_2eproto::scc_info_ServerReportsOpponentIsEnteringRoom.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serverMessageSystem.ServerReportsOpponentIsEnteringRoom)
}
ServerReportsOpponentIsEnteringRoom::ServerReportsOpponentIsEnteringRoom(const ServerReportsOpponentIsEnteringRoom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  opponentname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.opponentname().size() > 0) {
    opponentname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opponentname_);
  }
  if (from.has_header()) {
    header_ = new ::serverMessageSystem::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&connectioncmdid_, &from.connectioncmdid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&connectioncmdid_)) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:serverMessageSystem.ServerReportsOpponentIsEnteringRoom)
}

void ServerReportsOpponentIsEnteringRoom::SharedCtor() {
  opponentname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&header_)) + sizeof(roomid_));
}

ServerReportsOpponentIsEnteringRoom::~ServerReportsOpponentIsEnteringRoom() {
  // @@protoc_insertion_point(destructor:serverMessageSystem.ServerReportsOpponentIsEnteringRoom)
  SharedDtor();
}

void ServerReportsOpponentIsEnteringRoom::SharedDtor() {
  opponentname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void ServerReportsOpponentIsEnteringRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerReportsOpponentIsEnteringRoom::descriptor() {
  ::protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerReportsOpponentIsEnteringRoom& ServerReportsOpponentIsEnteringRoom::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_serverMessageSystem_2eproto::scc_info_ServerReportsOpponentIsEnteringRoom.base);
  return *internal_default_instance();
}


void ServerReportsOpponentIsEnteringRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:serverMessageSystem.ServerReportsOpponentIsEnteringRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opponentname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&connectioncmdid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&connectioncmdid_)) + sizeof(roomid_));
  _internal_metadata_.Clear();
}

bool ServerReportsOpponentIsEnteringRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serverMessageSystem.ServerReportsOpponentIsEnteringRoom)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .serverMessageSystem.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_connectioncmdid(static_cast< ::serverMessageSystem::ConnectionSubSysCommandsID >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string opponentName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opponentname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->opponentname().data(), static_cast<int>(this->opponentname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "serverMessageSystem.ServerReportsOpponentIsEnteringRoom.opponentName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 roomID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serverMessageSystem.ServerReportsOpponentIsEnteringRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serverMessageSystem.ServerReportsOpponentIsEnteringRoom)
  return false;
#undef DO_
}

void ServerReportsOpponentIsEnteringRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serverMessageSystem.ServerReportsOpponentIsEnteringRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->connectioncmdid(), output);
  }

  // string opponentName = 3;
  if (this->opponentname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opponentname().data(), static_cast<int>(this->opponentname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.ServerReportsOpponentIsEnteringRoom.opponentName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->opponentname(), output);
  }

  // uint32 roomID = 4;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->roomid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:serverMessageSystem.ServerReportsOpponentIsEnteringRoom)
}

::google::protobuf::uint8* ServerReportsOpponentIsEnteringRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serverMessageSystem.ServerReportsOpponentIsEnteringRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->connectioncmdid(), target);
  }

  // string opponentName = 3;
  if (this->opponentname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opponentname().data(), static_cast<int>(this->opponentname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.ServerReportsOpponentIsEnteringRoom.opponentName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->opponentname(), target);
  }

  // uint32 roomID = 4;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->roomid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverMessageSystem.ServerReportsOpponentIsEnteringRoom)
  return target;
}

size_t ServerReportsOpponentIsEnteringRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverMessageSystem.ServerReportsOpponentIsEnteringRoom)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string opponentName = 3;
  if (this->opponentname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->opponentname());
  }

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectioncmdid());
  }

  // uint32 roomID = 4;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerReportsOpponentIsEnteringRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serverMessageSystem.ServerReportsOpponentIsEnteringRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerReportsOpponentIsEnteringRoom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerReportsOpponentIsEnteringRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serverMessageSystem.ServerReportsOpponentIsEnteringRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serverMessageSystem.ServerReportsOpponentIsEnteringRoom)
    MergeFrom(*source);
  }
}

void ServerReportsOpponentIsEnteringRoom::MergeFrom(const ServerReportsOpponentIsEnteringRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serverMessageSystem.ServerReportsOpponentIsEnteringRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.opponentname().size() > 0) {

    opponentname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opponentname_);
  }
  if (from.has_header()) {
    mutable_header()->::serverMessageSystem::CommonHeader::MergeFrom(from.header());
  }
  if (from.connectioncmdid() != 0) {
    set_connectioncmdid(from.connectioncmdid());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
}

void ServerReportsOpponentIsEnteringRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serverMessageSystem.ServerReportsOpponentIsEnteringRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerReportsOpponentIsEnteringRoom::CopyFrom(const ServerReportsOpponentIsEnteringRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverMessageSystem.ServerReportsOpponentIsEnteringRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerReportsOpponentIsEnteringRoom::IsInitialized() const {
  return true;
}

void ServerReportsOpponentIsEnteringRoom::Swap(ServerReportsOpponentIsEnteringRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerReportsOpponentIsEnteringRoom::InternalSwap(ServerReportsOpponentIsEnteringRoom* other) {
  using std::swap;
  opponentname_.Swap(&other->opponentname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(connectioncmdid_, other->connectioncmdid_);
  swap(roomid_, other->roomid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerReportsOpponentIsEnteringRoom::GetMetadata() const {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChartMessage::InitAsDefaultInstance() {
  ::serverMessageSystem::_ChartMessage_default_instance_._instance.get_mutable()->header_ = const_cast< ::serverMessageSystem::CommonHeader*>(
      ::serverMessageSystem::CommonHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartMessage::kHeaderFieldNumber;
const int ChartMessage::kChartCmdIDFieldNumber;
const int ChartMessage::kSenderNameFieldNumber;
const int ChartMessage::kChartMessageFieldNumber;
const int ChartMessage::kRoomIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChartMessage::ChartMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serverMessageSystem_2eproto::scc_info_ChartMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serverMessageSystem.ChartMessage)
}
ChartMessage::ChartMessage(const ChartMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sendername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sendername().size() > 0) {
    sendername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sendername_);
  }
  chartmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chartmessage().size() > 0) {
    chartmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chartmessage_);
  }
  if (from.has_header()) {
    header_ = new ::serverMessageSystem::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&chartcmdid_, &from.chartcmdid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&chartcmdid_)) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:serverMessageSystem.ChartMessage)
}

void ChartMessage::SharedCtor() {
  sendername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chartmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&header_)) + sizeof(roomid_));
}

ChartMessage::~ChartMessage() {
  // @@protoc_insertion_point(destructor:serverMessageSystem.ChartMessage)
  SharedDtor();
}

void ChartMessage::SharedDtor() {
  sendername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chartmessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void ChartMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChartMessage::descriptor() {
  ::protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChartMessage& ChartMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_serverMessageSystem_2eproto::scc_info_ChartMessage.base);
  return *internal_default_instance();
}


void ChartMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:serverMessageSystem.ChartMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sendername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chartmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&chartcmdid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&chartcmdid_)) + sizeof(roomid_));
  _internal_metadata_.Clear();
}

bool ChartMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serverMessageSystem.ChartMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .serverMessageSystem.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .serverMessageSystem.ChartSubSysCommandsID chartCmdID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_chartcmdid(static_cast< ::serverMessageSystem::ChartSubSysCommandsID >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string senderName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sendername().data(), static_cast<int>(this->sendername().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "serverMessageSystem.ChartMessage.senderName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chartMessage = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chartmessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chartmessage().data(), static_cast<int>(this->chartmessage().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "serverMessageSystem.ChartMessage.chartMessage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 roomID = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serverMessageSystem.ChartMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serverMessageSystem.ChartMessage)
  return false;
#undef DO_
}

void ChartMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serverMessageSystem.ChartMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .serverMessageSystem.ChartSubSysCommandsID chartCmdID = 2;
  if (this->chartcmdid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->chartcmdid(), output);
  }

  // string senderName = 3;
  if (this->sendername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sendername().data(), static_cast<int>(this->sendername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.ChartMessage.senderName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sendername(), output);
  }

  // string chartMessage = 4;
  if (this->chartmessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chartmessage().data(), static_cast<int>(this->chartmessage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.ChartMessage.chartMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->chartmessage(), output);
  }

  // uint32 roomID = 5;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->roomid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:serverMessageSystem.ChartMessage)
}

::google::protobuf::uint8* ChartMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serverMessageSystem.ChartMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .serverMessageSystem.ChartSubSysCommandsID chartCmdID = 2;
  if (this->chartcmdid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->chartcmdid(), target);
  }

  // string senderName = 3;
  if (this->sendername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sendername().data(), static_cast<int>(this->sendername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.ChartMessage.senderName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sendername(), target);
  }

  // string chartMessage = 4;
  if (this->chartmessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chartmessage().data(), static_cast<int>(this->chartmessage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.ChartMessage.chartMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chartmessage(), target);
  }

  // uint32 roomID = 5;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->roomid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverMessageSystem.ChartMessage)
  return target;
}

size_t ChartMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverMessageSystem.ChartMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string senderName = 3;
  if (this->sendername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sendername());
  }

  // string chartMessage = 4;
  if (this->chartmessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chartmessage());
  }

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .serverMessageSystem.ChartSubSysCommandsID chartCmdID = 2;
  if (this->chartcmdid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->chartcmdid());
  }

  // uint32 roomID = 5;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serverMessageSystem.ChartMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChartMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serverMessageSystem.ChartMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serverMessageSystem.ChartMessage)
    MergeFrom(*source);
  }
}

void ChartMessage::MergeFrom(const ChartMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serverMessageSystem.ChartMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sendername().size() > 0) {

    sendername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sendername_);
  }
  if (from.chartmessage().size() > 0) {

    chartmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chartmessage_);
  }
  if (from.has_header()) {
    mutable_header()->::serverMessageSystem::CommonHeader::MergeFrom(from.header());
  }
  if (from.chartcmdid() != 0) {
    set_chartcmdid(from.chartcmdid());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
}

void ChartMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serverMessageSystem.ChartMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartMessage::CopyFrom(const ChartMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverMessageSystem.ChartMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartMessage::IsInitialized() const {
  return true;
}

void ChartMessage::Swap(ChartMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChartMessage::InternalSwap(ChartMessage* other) {
  using std::swap;
  sendername_.Swap(&other->sendername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chartmessage_.Swap(&other->chartmessage_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(chartcmdid_, other->chartcmdid_);
  swap(roomid_, other->roomid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChartMessage::GetMetadata() const {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DefaultMessage::InitAsDefaultInstance() {
  ::serverMessageSystem::_DefaultMessage_default_instance_._instance.get_mutable()->header_ = const_cast< ::serverMessageSystem::CommonHeader*>(
      ::serverMessageSystem::CommonHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DefaultMessage::kHeaderFieldNumber;
const int DefaultMessage::kChartCmdIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DefaultMessage::DefaultMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serverMessageSystem_2eproto::scc_info_DefaultMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serverMessageSystem.DefaultMessage)
}
DefaultMessage::DefaultMessage(const DefaultMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::serverMessageSystem::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  chartcmdid_ = from.chartcmdid_;
  // @@protoc_insertion_point(copy_constructor:serverMessageSystem.DefaultMessage)
}

void DefaultMessage::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chartcmdid_) -
      reinterpret_cast<char*>(&header_)) + sizeof(chartcmdid_));
}

DefaultMessage::~DefaultMessage() {
  // @@protoc_insertion_point(destructor:serverMessageSystem.DefaultMessage)
  SharedDtor();
}

void DefaultMessage::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void DefaultMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DefaultMessage::descriptor() {
  ::protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DefaultMessage& DefaultMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_serverMessageSystem_2eproto::scc_info_DefaultMessage.base);
  return *internal_default_instance();
}


void DefaultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:serverMessageSystem.DefaultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  chartcmdid_ = 0;
  _internal_metadata_.Clear();
}

bool DefaultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serverMessageSystem.DefaultMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .serverMessageSystem.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .serverMessageSystem.ChartSubSysCommandsID chartCmdID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_chartcmdid(static_cast< ::serverMessageSystem::ChartSubSysCommandsID >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serverMessageSystem.DefaultMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serverMessageSystem.DefaultMessage)
  return false;
#undef DO_
}

void DefaultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serverMessageSystem.DefaultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .serverMessageSystem.ChartSubSysCommandsID chartCmdID = 2;
  if (this->chartcmdid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->chartcmdid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:serverMessageSystem.DefaultMessage)
}

::google::protobuf::uint8* DefaultMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serverMessageSystem.DefaultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .serverMessageSystem.ChartSubSysCommandsID chartCmdID = 2;
  if (this->chartcmdid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->chartcmdid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverMessageSystem.DefaultMessage)
  return target;
}

size_t DefaultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverMessageSystem.DefaultMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .serverMessageSystem.ChartSubSysCommandsID chartCmdID = 2;
  if (this->chartcmdid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->chartcmdid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DefaultMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serverMessageSystem.DefaultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DefaultMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DefaultMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serverMessageSystem.DefaultMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serverMessageSystem.DefaultMessage)
    MergeFrom(*source);
  }
}

void DefaultMessage::MergeFrom(const DefaultMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serverMessageSystem.DefaultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::serverMessageSystem::CommonHeader::MergeFrom(from.header());
  }
  if (from.chartcmdid() != 0) {
    set_chartcmdid(from.chartcmdid());
  }
}

void DefaultMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serverMessageSystem.DefaultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefaultMessage::CopyFrom(const DefaultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverMessageSystem.DefaultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultMessage::IsInitialized() const {
  return true;
}

void DefaultMessage::Swap(DefaultMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DefaultMessage::InternalSwap(DefaultMessage* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(chartcmdid_, other->chartcmdid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DefaultMessage::GetMetadata() const {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerRoomChangesInSelectableList::InitAsDefaultInstance() {
  ::serverMessageSystem::_ServerRoomChangesInSelectableList_default_instance_._instance.get_mutable()->header_ = const_cast< ::serverMessageSystem::CommonHeader*>(
      ::serverMessageSystem::CommonHeader::internal_default_instance());
  ::serverMessageSystem::_ServerRoomChangesInSelectableList_default_instance_._instance.get_mutable()->room_ = const_cast< ::serverMessageSystem::CreatedRoom*>(
      ::serverMessageSystem::CreatedRoom::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerRoomChangesInSelectableList::kHeaderFieldNumber;
const int ServerRoomChangesInSelectableList::kDeletedOrUpdateFlagFieldNumber;
const int ServerRoomChangesInSelectableList::kConnectionCmdIDFieldNumber;
const int ServerRoomChangesInSelectableList::kRoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerRoomChangesInSelectableList::ServerRoomChangesInSelectableList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serverMessageSystem_2eproto::scc_info_ServerRoomChangesInSelectableList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serverMessageSystem.ServerRoomChangesInSelectableList)
}
ServerRoomChangesInSelectableList::ServerRoomChangesInSelectableList(const ServerRoomChangesInSelectableList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::serverMessageSystem::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_room()) {
    room_ = new ::serverMessageSystem::CreatedRoom(*from.room_);
  } else {
    room_ = NULL;
  }
  ::memcpy(&deletedorupdateflag_, &from.deletedorupdateflag_,
    static_cast<size_t>(reinterpret_cast<char*>(&connectioncmdid_) -
    reinterpret_cast<char*>(&deletedorupdateflag_)) + sizeof(connectioncmdid_));
  // @@protoc_insertion_point(copy_constructor:serverMessageSystem.ServerRoomChangesInSelectableList)
}

void ServerRoomChangesInSelectableList::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connectioncmdid_) -
      reinterpret_cast<char*>(&header_)) + sizeof(connectioncmdid_));
}

ServerRoomChangesInSelectableList::~ServerRoomChangesInSelectableList() {
  // @@protoc_insertion_point(destructor:serverMessageSystem.ServerRoomChangesInSelectableList)
  SharedDtor();
}

void ServerRoomChangesInSelectableList::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete room_;
}

void ServerRoomChangesInSelectableList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerRoomChangesInSelectableList::descriptor() {
  ::protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerRoomChangesInSelectableList& ServerRoomChangesInSelectableList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_serverMessageSystem_2eproto::scc_info_ServerRoomChangesInSelectableList.base);
  return *internal_default_instance();
}


void ServerRoomChangesInSelectableList::Clear() {
// @@protoc_insertion_point(message_clear_start:serverMessageSystem.ServerRoomChangesInSelectableList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && room_ != NULL) {
    delete room_;
  }
  room_ = NULL;
  ::memset(&deletedorupdateflag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connectioncmdid_) -
      reinterpret_cast<char*>(&deletedorupdateflag_)) + sizeof(connectioncmdid_));
  _internal_metadata_.Clear();
}

bool ServerRoomChangesInSelectableList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serverMessageSystem.ServerRoomChangesInSelectableList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .serverMessageSystem.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool deletedOrUpdateFlag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deletedorupdateflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_connectioncmdid(static_cast< ::serverMessageSystem::ConnectionSubSysCommandsID >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .serverMessageSystem.CreatedRoom room = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serverMessageSystem.ServerRoomChangesInSelectableList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serverMessageSystem.ServerRoomChangesInSelectableList)
  return false;
#undef DO_
}

void ServerRoomChangesInSelectableList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serverMessageSystem.ServerRoomChangesInSelectableList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // bool deletedOrUpdateFlag = 2;
  if (this->deletedorupdateflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->deletedorupdateflag(), output);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 3;
  if (this->connectioncmdid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->connectioncmdid(), output);
  }

  // .serverMessageSystem.CreatedRoom room = 4;
  if (this->has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_room(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:serverMessageSystem.ServerRoomChangesInSelectableList)
}

::google::protobuf::uint8* ServerRoomChangesInSelectableList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serverMessageSystem.ServerRoomChangesInSelectableList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // bool deletedOrUpdateFlag = 2;
  if (this->deletedorupdateflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->deletedorupdateflag(), target);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 3;
  if (this->connectioncmdid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->connectioncmdid(), target);
  }

  // .serverMessageSystem.CreatedRoom room = 4;
  if (this->has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_room(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverMessageSystem.ServerRoomChangesInSelectableList)
  return target;
}

size_t ServerRoomChangesInSelectableList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverMessageSystem.ServerRoomChangesInSelectableList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .serverMessageSystem.CreatedRoom room = 4;
  if (this->has_room()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *room_);
  }

  // bool deletedOrUpdateFlag = 2;
  if (this->deletedorupdateflag() != 0) {
    total_size += 1 + 1;
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 3;
  if (this->connectioncmdid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectioncmdid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerRoomChangesInSelectableList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serverMessageSystem.ServerRoomChangesInSelectableList)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerRoomChangesInSelectableList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerRoomChangesInSelectableList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serverMessageSystem.ServerRoomChangesInSelectableList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serverMessageSystem.ServerRoomChangesInSelectableList)
    MergeFrom(*source);
  }
}

void ServerRoomChangesInSelectableList::MergeFrom(const ServerRoomChangesInSelectableList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serverMessageSystem.ServerRoomChangesInSelectableList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::serverMessageSystem::CommonHeader::MergeFrom(from.header());
  }
  if (from.has_room()) {
    mutable_room()->::serverMessageSystem::CreatedRoom::MergeFrom(from.room());
  }
  if (from.deletedorupdateflag() != 0) {
    set_deletedorupdateflag(from.deletedorupdateflag());
  }
  if (from.connectioncmdid() != 0) {
    set_connectioncmdid(from.connectioncmdid());
  }
}

void ServerRoomChangesInSelectableList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serverMessageSystem.ServerRoomChangesInSelectableList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerRoomChangesInSelectableList::CopyFrom(const ServerRoomChangesInSelectableList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverMessageSystem.ServerRoomChangesInSelectableList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerRoomChangesInSelectableList::IsInitialized() const {
  return true;
}

void ServerRoomChangesInSelectableList::Swap(ServerRoomChangesInSelectableList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerRoomChangesInSelectableList::InternalSwap(ServerRoomChangesInSelectableList* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(room_, other->room_);
  swap(deletedorupdateflag_, other->deletedorupdateflag_);
  swap(connectioncmdid_, other->connectioncmdid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerRoomChangesInSelectableList::GetMetadata() const {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientWantedToEnterTheRoom::InitAsDefaultInstance() {
  ::serverMessageSystem::_ClientWantedToEnterTheRoom_default_instance_._instance.get_mutable()->header_ = const_cast< ::serverMessageSystem::CommonHeader*>(
      ::serverMessageSystem::CommonHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientWantedToEnterTheRoom::kHeaderFieldNumber;
const int ClientWantedToEnterTheRoom::kConnectionCmdIDFieldNumber;
const int ClientWantedToEnterTheRoom::kClientNameFieldNumber;
const int ClientWantedToEnterTheRoom::kRoomIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientWantedToEnterTheRoom::ClientWantedToEnterTheRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serverMessageSystem_2eproto::scc_info_ClientWantedToEnterTheRoom.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serverMessageSystem.ClientWantedToEnterTheRoom)
}
ClientWantedToEnterTheRoom::ClientWantedToEnterTheRoom(const ClientWantedToEnterTheRoom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientname().size() > 0) {
    clientname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientname_);
  }
  if (from.has_header()) {
    header_ = new ::serverMessageSystem::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&connectioncmdid_, &from.connectioncmdid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&connectioncmdid_)) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:serverMessageSystem.ClientWantedToEnterTheRoom)
}

void ClientWantedToEnterTheRoom::SharedCtor() {
  clientname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&header_)) + sizeof(roomid_));
}

ClientWantedToEnterTheRoom::~ClientWantedToEnterTheRoom() {
  // @@protoc_insertion_point(destructor:serverMessageSystem.ClientWantedToEnterTheRoom)
  SharedDtor();
}

void ClientWantedToEnterTheRoom::SharedDtor() {
  clientname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void ClientWantedToEnterTheRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientWantedToEnterTheRoom::descriptor() {
  ::protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientWantedToEnterTheRoom& ClientWantedToEnterTheRoom::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_serverMessageSystem_2eproto::scc_info_ClientWantedToEnterTheRoom.base);
  return *internal_default_instance();
}


void ClientWantedToEnterTheRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:serverMessageSystem.ClientWantedToEnterTheRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&connectioncmdid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&connectioncmdid_)) + sizeof(roomid_));
  _internal_metadata_.Clear();
}

bool ClientWantedToEnterTheRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serverMessageSystem.ClientWantedToEnterTheRoom)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .serverMessageSystem.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_connectioncmdid(static_cast< ::serverMessageSystem::ConnectionSubSysCommandsID >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string clientName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientname().data(), static_cast<int>(this->clientname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "serverMessageSystem.ClientWantedToEnterTheRoom.clientName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 roomID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serverMessageSystem.ClientWantedToEnterTheRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serverMessageSystem.ClientWantedToEnterTheRoom)
  return false;
#undef DO_
}

void ClientWantedToEnterTheRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serverMessageSystem.ClientWantedToEnterTheRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->connectioncmdid(), output);
  }

  // string clientName = 3;
  if (this->clientname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientname().data(), static_cast<int>(this->clientname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.ClientWantedToEnterTheRoom.clientName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->clientname(), output);
  }

  // uint32 roomID = 4;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->roomid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:serverMessageSystem.ClientWantedToEnterTheRoom)
}

::google::protobuf::uint8* ClientWantedToEnterTheRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serverMessageSystem.ClientWantedToEnterTheRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->connectioncmdid(), target);
  }

  // string clientName = 3;
  if (this->clientname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientname().data(), static_cast<int>(this->clientname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "serverMessageSystem.ClientWantedToEnterTheRoom.clientName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clientname(), target);
  }

  // uint32 roomID = 4;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->roomid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverMessageSystem.ClientWantedToEnterTheRoom)
  return target;
}

size_t ClientWantedToEnterTheRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverMessageSystem.ClientWantedToEnterTheRoom)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string clientName = 3;
  if (this->clientname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientname());
  }

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectioncmdid());
  }

  // uint32 roomID = 4;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientWantedToEnterTheRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serverMessageSystem.ClientWantedToEnterTheRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientWantedToEnterTheRoom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientWantedToEnterTheRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serverMessageSystem.ClientWantedToEnterTheRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serverMessageSystem.ClientWantedToEnterTheRoom)
    MergeFrom(*source);
  }
}

void ClientWantedToEnterTheRoom::MergeFrom(const ClientWantedToEnterTheRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serverMessageSystem.ClientWantedToEnterTheRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientname().size() > 0) {

    clientname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientname_);
  }
  if (from.has_header()) {
    mutable_header()->::serverMessageSystem::CommonHeader::MergeFrom(from.header());
  }
  if (from.connectioncmdid() != 0) {
    set_connectioncmdid(from.connectioncmdid());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
}

void ClientWantedToEnterTheRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serverMessageSystem.ClientWantedToEnterTheRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientWantedToEnterTheRoom::CopyFrom(const ClientWantedToEnterTheRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverMessageSystem.ClientWantedToEnterTheRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientWantedToEnterTheRoom::IsInitialized() const {
  return true;
}

void ClientWantedToEnterTheRoom::Swap(ClientWantedToEnterTheRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientWantedToEnterTheRoom::InternalSwap(ClientWantedToEnterTheRoom* other) {
  using std::swap;
  clientname_.Swap(&other->clientname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(connectioncmdid_, other->connectioncmdid_);
  swap(roomid_, other->roomid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientWantedToEnterTheRoom::GetMetadata() const {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerClientWantedToEnterTheRoomReply::InitAsDefaultInstance() {
  ::serverMessageSystem::_ServerClientWantedToEnterTheRoomReply_default_instance_._instance.get_mutable()->header_ = const_cast< ::serverMessageSystem::CommonHeader*>(
      ::serverMessageSystem::CommonHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerClientWantedToEnterTheRoomReply::kHeaderFieldNumber;
const int ServerClientWantedToEnterTheRoomReply::kConnectionCmdIDFieldNumber;
const int ServerClientWantedToEnterTheRoomReply::kEntranceAllowedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerClientWantedToEnterTheRoomReply::ServerClientWantedToEnterTheRoomReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serverMessageSystem_2eproto::scc_info_ServerClientWantedToEnterTheRoomReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:serverMessageSystem.ServerClientWantedToEnterTheRoomReply)
}
ServerClientWantedToEnterTheRoomReply::ServerClientWantedToEnterTheRoomReply(const ServerClientWantedToEnterTheRoomReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::serverMessageSystem::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&connectioncmdid_, &from.connectioncmdid_,
    static_cast<size_t>(reinterpret_cast<char*>(&entranceallowed_) -
    reinterpret_cast<char*>(&connectioncmdid_)) + sizeof(entranceallowed_));
  // @@protoc_insertion_point(copy_constructor:serverMessageSystem.ServerClientWantedToEnterTheRoomReply)
}

void ServerClientWantedToEnterTheRoomReply::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entranceallowed_) -
      reinterpret_cast<char*>(&header_)) + sizeof(entranceallowed_));
}

ServerClientWantedToEnterTheRoomReply::~ServerClientWantedToEnterTheRoomReply() {
  // @@protoc_insertion_point(destructor:serverMessageSystem.ServerClientWantedToEnterTheRoomReply)
  SharedDtor();
}

void ServerClientWantedToEnterTheRoomReply::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ServerClientWantedToEnterTheRoomReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerClientWantedToEnterTheRoomReply::descriptor() {
  ::protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerClientWantedToEnterTheRoomReply& ServerClientWantedToEnterTheRoomReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_serverMessageSystem_2eproto::scc_info_ServerClientWantedToEnterTheRoomReply.base);
  return *internal_default_instance();
}


void ServerClientWantedToEnterTheRoomReply::Clear() {
// @@protoc_insertion_point(message_clear_start:serverMessageSystem.ServerClientWantedToEnterTheRoomReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&connectioncmdid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entranceallowed_) -
      reinterpret_cast<char*>(&connectioncmdid_)) + sizeof(entranceallowed_));
  _internal_metadata_.Clear();
}

bool ServerClientWantedToEnterTheRoomReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serverMessageSystem.ServerClientWantedToEnterTheRoomReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .serverMessageSystem.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_connectioncmdid(static_cast< ::serverMessageSystem::ConnectionSubSysCommandsID >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool entranceAllowed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &entranceallowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serverMessageSystem.ServerClientWantedToEnterTheRoomReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serverMessageSystem.ServerClientWantedToEnterTheRoomReply)
  return false;
#undef DO_
}

void ServerClientWantedToEnterTheRoomReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serverMessageSystem.ServerClientWantedToEnterTheRoomReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->connectioncmdid(), output);
  }

  // bool entranceAllowed = 3;
  if (this->entranceallowed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->entranceallowed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:serverMessageSystem.ServerClientWantedToEnterTheRoomReply)
}

::google::protobuf::uint8* ServerClientWantedToEnterTheRoomReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:serverMessageSystem.ServerClientWantedToEnterTheRoomReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->connectioncmdid(), target);
  }

  // bool entranceAllowed = 3;
  if (this->entranceallowed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->entranceallowed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverMessageSystem.ServerClientWantedToEnterTheRoomReply)
  return target;
}

size_t ServerClientWantedToEnterTheRoomReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverMessageSystem.ServerClientWantedToEnterTheRoomReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .serverMessageSystem.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .serverMessageSystem.ConnectionSubSysCommandsID connectionCmdID = 2;
  if (this->connectioncmdid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectioncmdid());
  }

  // bool entranceAllowed = 3;
  if (this->entranceallowed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerClientWantedToEnterTheRoomReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serverMessageSystem.ServerClientWantedToEnterTheRoomReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerClientWantedToEnterTheRoomReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerClientWantedToEnterTheRoomReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serverMessageSystem.ServerClientWantedToEnterTheRoomReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serverMessageSystem.ServerClientWantedToEnterTheRoomReply)
    MergeFrom(*source);
  }
}

void ServerClientWantedToEnterTheRoomReply::MergeFrom(const ServerClientWantedToEnterTheRoomReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serverMessageSystem.ServerClientWantedToEnterTheRoomReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::serverMessageSystem::CommonHeader::MergeFrom(from.header());
  }
  if (from.connectioncmdid() != 0) {
    set_connectioncmdid(from.connectioncmdid());
  }
  if (from.entranceallowed() != 0) {
    set_entranceallowed(from.entranceallowed());
  }
}

void ServerClientWantedToEnterTheRoomReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serverMessageSystem.ServerClientWantedToEnterTheRoomReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerClientWantedToEnterTheRoomReply::CopyFrom(const ServerClientWantedToEnterTheRoomReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverMessageSystem.ServerClientWantedToEnterTheRoomReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerClientWantedToEnterTheRoomReply::IsInitialized() const {
  return true;
}

void ServerClientWantedToEnterTheRoomReply::Swap(ServerClientWantedToEnterTheRoomReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerClientWantedToEnterTheRoomReply::InternalSwap(ServerClientWantedToEnterTheRoomReply* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(connectioncmdid_, other->connectioncmdid_);
  swap(entranceallowed_, other->entranceallowed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerClientWantedToEnterTheRoomReply::GetMetadata() const {
  protobuf_serverMessageSystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serverMessageSystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace serverMessageSystem
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serverMessageSystem::CommonHeader* Arena::CreateMaybeMessage< ::serverMessageSystem::CommonHeader >(Arena* arena) {
  return Arena::CreateInternal< ::serverMessageSystem::CommonHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serverMessageSystem::TimeSettings* Arena::CreateMaybeMessage< ::serverMessageSystem::TimeSettings >(Arena* arena) {
  return Arena::CreateInternal< ::serverMessageSystem::TimeSettings >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serverMessageSystem::GameType* Arena::CreateMaybeMessage< ::serverMessageSystem::GameType >(Arena* arena) {
  return Arena::CreateInternal< ::serverMessageSystem::GameType >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serverMessageSystem::GameSettings* Arena::CreateMaybeMessage< ::serverMessageSystem::GameSettings >(Arena* arena) {
  return Arena::CreateInternal< ::serverMessageSystem::GameSettings >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serverMessageSystem::RoomCreationErrors* Arena::CreateMaybeMessage< ::serverMessageSystem::RoomCreationErrors >(Arena* arena) {
  return Arena::CreateInternal< ::serverMessageSystem::RoomCreationErrors >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serverMessageSystem::CreatedRoom* Arena::CreateMaybeMessage< ::serverMessageSystem::CreatedRoom >(Arena* arena) {
  return Arena::CreateInternal< ::serverMessageSystem::CreatedRoom >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serverMessageSystem::ServerInputQuery* Arena::CreateMaybeMessage< ::serverMessageSystem::ServerInputQuery >(Arena* arena) {
  return Arena::CreateInternal< ::serverMessageSystem::ServerInputQuery >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serverMessageSystem::ServerQueryReply* Arena::CreateMaybeMessage< ::serverMessageSystem::ServerQueryReply >(Arena* arena) {
  return Arena::CreateInternal< ::serverMessageSystem::ServerQueryReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serverMessageSystem::ClientRoomCreationRequest* Arena::CreateMaybeMessage< ::serverMessageSystem::ClientRoomCreationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::serverMessageSystem::ClientRoomCreationRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serverMessageSystem::ClientRoomCreationReply* Arena::CreateMaybeMessage< ::serverMessageSystem::ClientRoomCreationReply >(Arena* arena) {
  return Arena::CreateInternal< ::serverMessageSystem::ClientRoomCreationReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serverMessageSystem::ClientConnectionToRoomRequest* Arena::CreateMaybeMessage< ::serverMessageSystem::ClientConnectionToRoomRequest >(Arena* arena) {
  return Arena::CreateInternal< ::serverMessageSystem::ClientConnectionToRoomRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serverMessageSystem::ClientConnectionToRoomReply* Arena::CreateMaybeMessage< ::serverMessageSystem::ClientConnectionToRoomReply >(Arena* arena) {
  return Arena::CreateInternal< ::serverMessageSystem::ClientConnectionToRoomReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serverMessageSystem::ServerQueryOrderNotification* Arena::CreateMaybeMessage< ::serverMessageSystem::ServerQueryOrderNotification >(Arena* arena) {
  return Arena::CreateInternal< ::serverMessageSystem::ServerQueryOrderNotification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serverMessageSystem::ServerReportsOpponentIsEnteringRoom* Arena::CreateMaybeMessage< ::serverMessageSystem::ServerReportsOpponentIsEnteringRoom >(Arena* arena) {
  return Arena::CreateInternal< ::serverMessageSystem::ServerReportsOpponentIsEnteringRoom >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serverMessageSystem::ChartMessage* Arena::CreateMaybeMessage< ::serverMessageSystem::ChartMessage >(Arena* arena) {
  return Arena::CreateInternal< ::serverMessageSystem::ChartMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serverMessageSystem::DefaultMessage* Arena::CreateMaybeMessage< ::serverMessageSystem::DefaultMessage >(Arena* arena) {
  return Arena::CreateInternal< ::serverMessageSystem::DefaultMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serverMessageSystem::ServerRoomChangesInSelectableList* Arena::CreateMaybeMessage< ::serverMessageSystem::ServerRoomChangesInSelectableList >(Arena* arena) {
  return Arena::CreateInternal< ::serverMessageSystem::ServerRoomChangesInSelectableList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serverMessageSystem::ClientWantedToEnterTheRoom* Arena::CreateMaybeMessage< ::serverMessageSystem::ClientWantedToEnterTheRoom >(Arena* arena) {
  return Arena::CreateInternal< ::serverMessageSystem::ClientWantedToEnterTheRoom >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::serverMessageSystem::ServerClientWantedToEnterTheRoomReply* Arena::CreateMaybeMessage< ::serverMessageSystem::ServerClientWantedToEnterTheRoomReply >(Arena* arena) {
  return Arena::CreateInternal< ::serverMessageSystem::ServerClientWantedToEnterTheRoomReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
