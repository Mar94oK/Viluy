// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serverMessageSystem.proto

#ifndef PROTOBUF_INCLUDED_serverMessageSystem_2eproto
#define PROTOBUF_INCLUDED_serverMessageSystem_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_serverMessageSystem_2eproto 

namespace protobuf_serverMessageSystem_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_serverMessageSystem_2eproto
namespace serverMessageSystem {
class ClientEnteringRequest;
class ClientEnteringRequestDefaultTypeInternal;
extern ClientEnteringRequestDefaultTypeInternal _ClientEnteringRequest_default_instance_;
class GameType;
class GameTypeDefaultTypeInternal;
extern GameTypeDefaultTypeInternal _GameType_default_instance_;
}  // namespace serverMessageSystem
namespace google {
namespace protobuf {
template<> ::serverMessageSystem::ClientEnteringRequest* Arena::CreateMaybeMessage<::serverMessageSystem::ClientEnteringRequest>(Arena*);
template<> ::serverMessageSystem::GameType* Arena::CreateMaybeMessage<::serverMessageSystem::GameType>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace serverMessageSystem {

enum RulesType {
  Automatic = 0,
  Manual = 1,
  RulesType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RulesType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RulesType_IsValid(int value);
const RulesType RulesType_MIN = Automatic;
const RulesType RulesType_MAX = Manual;
const int RulesType_ARRAYSIZE = RulesType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RulesType_descriptor();
inline const ::std::string& RulesType_Name(RulesType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RulesType_descriptor(), value);
}
inline bool RulesType_Parse(
    const ::std::string& name, RulesType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RulesType>(
    RulesType_descriptor(), name, value);
}
enum GameCreationRequest {
  JoinTheGame = 0,
  CreateTheGame = 1,
  GameCreationRequest_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GameCreationRequest_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GameCreationRequest_IsValid(int value);
const GameCreationRequest GameCreationRequest_MIN = JoinTheGame;
const GameCreationRequest GameCreationRequest_MAX = CreateTheGame;
const int GameCreationRequest_ARRAYSIZE = GameCreationRequest_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameCreationRequest_descriptor();
inline const ::std::string& GameCreationRequest_Name(GameCreationRequest value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameCreationRequest_descriptor(), value);
}
inline bool GameCreationRequest_Parse(
    const ::std::string& name, GameCreationRequest* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameCreationRequest>(
    GameCreationRequest_descriptor(), name, value);
}
// ===================================================================

class GameType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:serverMessageSystem.GameType) */ {
 public:
  GameType();
  virtual ~GameType();

  GameType(const GameType& from);

  inline GameType& operator=(const GameType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameType(GameType&& from) noexcept
    : GameType() {
    *this = ::std::move(from);
  }

  inline GameType& operator=(GameType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameType* internal_default_instance() {
    return reinterpret_cast<const GameType*>(
               &_GameType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GameType* other);
  friend void swap(GameType& a, GameType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameType* New() const final {
    return CreateMaybeMessage<GameType>(NULL);
  }

  GameType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameType& from);
  void MergeFrom(const GameType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool hasAddonWildAxe = 1;
  void clear_hasaddonwildaxe();
  static const int kHasAddonWildAxeFieldNumber = 1;
  bool hasaddonwildaxe() const;
  void set_hasaddonwildaxe(bool value);

  // bool hasAddonClericalErrors = 2;
  void clear_hasaddonclericalerrors();
  static const int kHasAddonClericalErrorsFieldNumber = 2;
  bool hasaddonclericalerrors() const;
  void set_hasaddonclericalerrors(bool value);

  // .serverMessageSystem.RulesType rulesType = 3;
  void clear_rulestype();
  static const int kRulesTypeFieldNumber = 3;
  ::serverMessageSystem::RulesType rulestype() const;
  void set_rulestype(::serverMessageSystem::RulesType value);

  // @@protoc_insertion_point(class_scope:serverMessageSystem.GameType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool hasaddonwildaxe_;
  bool hasaddonclericalerrors_;
  int rulestype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_serverMessageSystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientEnteringRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:serverMessageSystem.ClientEnteringRequest) */ {
 public:
  ClientEnteringRequest();
  virtual ~ClientEnteringRequest();

  ClientEnteringRequest(const ClientEnteringRequest& from);

  inline ClientEnteringRequest& operator=(const ClientEnteringRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientEnteringRequest(ClientEnteringRequest&& from) noexcept
    : ClientEnteringRequest() {
    *this = ::std::move(from);
  }

  inline ClientEnteringRequest& operator=(ClientEnteringRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientEnteringRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientEnteringRequest* internal_default_instance() {
    return reinterpret_cast<const ClientEnteringRequest*>(
               &_ClientEnteringRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ClientEnteringRequest* other);
  friend void swap(ClientEnteringRequest& a, ClientEnteringRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientEnteringRequest* New() const final {
    return CreateMaybeMessage<ClientEnteringRequest>(NULL);
  }

  ClientEnteringRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientEnteringRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientEnteringRequest& from);
  void MergeFrom(const ClientEnteringRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientEnteringRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string clientName = 2;
  void clear_clientname();
  static const int kClientNameFieldNumber = 2;
  const ::std::string& clientname() const;
  void set_clientname(const ::std::string& value);
  #if LANG_CXX11
  void set_clientname(::std::string&& value);
  #endif
  void set_clientname(const char* value);
  void set_clientname(const char* value, size_t size);
  ::std::string* mutable_clientname();
  ::std::string* release_clientname();
  void set_allocated_clientname(::std::string* clientname);

  // .serverMessageSystem.GameType gameType = 4;
  bool has_gametype() const;
  void clear_gametype();
  static const int kGameTypeFieldNumber = 4;
  private:
  const ::serverMessageSystem::GameType& _internal_gametype() const;
  public:
  const ::serverMessageSystem::GameType& gametype() const;
  ::serverMessageSystem::GameType* release_gametype();
  ::serverMessageSystem::GameType* mutable_gametype();
  void set_allocated_gametype(::serverMessageSystem::GameType* gametype);

  // uint32 messageID = 1;
  void clear_messageid();
  static const int kMessageIDFieldNumber = 1;
  ::google::protobuf::uint32 messageid() const;
  void set_messageid(::google::protobuf::uint32 value);

  // .serverMessageSystem.GameCreationRequest enteringRequest = 3;
  void clear_enteringrequest();
  static const int kEnteringRequestFieldNumber = 3;
  ::serverMessageSystem::GameCreationRequest enteringrequest() const;
  void set_enteringrequest(::serverMessageSystem::GameCreationRequest value);

  // @@protoc_insertion_point(class_scope:serverMessageSystem.ClientEnteringRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr clientname_;
  ::serverMessageSystem::GameType* gametype_;
  ::google::protobuf::uint32 messageid_;
  int enteringrequest_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_serverMessageSystem_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameType

// bool hasAddonWildAxe = 1;
inline void GameType::clear_hasaddonwildaxe() {
  hasaddonwildaxe_ = false;
}
inline bool GameType::hasaddonwildaxe() const {
  // @@protoc_insertion_point(field_get:serverMessageSystem.GameType.hasAddonWildAxe)
  return hasaddonwildaxe_;
}
inline void GameType::set_hasaddonwildaxe(bool value) {
  
  hasaddonwildaxe_ = value;
  // @@protoc_insertion_point(field_set:serverMessageSystem.GameType.hasAddonWildAxe)
}

// bool hasAddonClericalErrors = 2;
inline void GameType::clear_hasaddonclericalerrors() {
  hasaddonclericalerrors_ = false;
}
inline bool GameType::hasaddonclericalerrors() const {
  // @@protoc_insertion_point(field_get:serverMessageSystem.GameType.hasAddonClericalErrors)
  return hasaddonclericalerrors_;
}
inline void GameType::set_hasaddonclericalerrors(bool value) {
  
  hasaddonclericalerrors_ = value;
  // @@protoc_insertion_point(field_set:serverMessageSystem.GameType.hasAddonClericalErrors)
}

// .serverMessageSystem.RulesType rulesType = 3;
inline void GameType::clear_rulestype() {
  rulestype_ = 0;
}
inline ::serverMessageSystem::RulesType GameType::rulestype() const {
  // @@protoc_insertion_point(field_get:serverMessageSystem.GameType.rulesType)
  return static_cast< ::serverMessageSystem::RulesType >(rulestype_);
}
inline void GameType::set_rulestype(::serverMessageSystem::RulesType value) {
  
  rulestype_ = value;
  // @@protoc_insertion_point(field_set:serverMessageSystem.GameType.rulesType)
}

// -------------------------------------------------------------------

// ClientEnteringRequest

// uint32 messageID = 1;
inline void ClientEnteringRequest::clear_messageid() {
  messageid_ = 0u;
}
inline ::google::protobuf::uint32 ClientEnteringRequest::messageid() const {
  // @@protoc_insertion_point(field_get:serverMessageSystem.ClientEnteringRequest.messageID)
  return messageid_;
}
inline void ClientEnteringRequest::set_messageid(::google::protobuf::uint32 value) {
  
  messageid_ = value;
  // @@protoc_insertion_point(field_set:serverMessageSystem.ClientEnteringRequest.messageID)
}

// string clientName = 2;
inline void ClientEnteringRequest::clear_clientname() {
  clientname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientEnteringRequest::clientname() const {
  // @@protoc_insertion_point(field_get:serverMessageSystem.ClientEnteringRequest.clientName)
  return clientname_.GetNoArena();
}
inline void ClientEnteringRequest::set_clientname(const ::std::string& value) {
  
  clientname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:serverMessageSystem.ClientEnteringRequest.clientName)
}
#if LANG_CXX11
inline void ClientEnteringRequest::set_clientname(::std::string&& value) {
  
  clientname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serverMessageSystem.ClientEnteringRequest.clientName)
}
#endif
inline void ClientEnteringRequest::set_clientname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clientname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serverMessageSystem.ClientEnteringRequest.clientName)
}
inline void ClientEnteringRequest::set_clientname(const char* value, size_t size) {
  
  clientname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serverMessageSystem.ClientEnteringRequest.clientName)
}
inline ::std::string* ClientEnteringRequest::mutable_clientname() {
  
  // @@protoc_insertion_point(field_mutable:serverMessageSystem.ClientEnteringRequest.clientName)
  return clientname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientEnteringRequest::release_clientname() {
  // @@protoc_insertion_point(field_release:serverMessageSystem.ClientEnteringRequest.clientName)
  
  return clientname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientEnteringRequest::set_allocated_clientname(::std::string* clientname) {
  if (clientname != NULL) {
    
  } else {
    
  }
  clientname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientname);
  // @@protoc_insertion_point(field_set_allocated:serverMessageSystem.ClientEnteringRequest.clientName)
}

// .serverMessageSystem.GameCreationRequest enteringRequest = 3;
inline void ClientEnteringRequest::clear_enteringrequest() {
  enteringrequest_ = 0;
}
inline ::serverMessageSystem::GameCreationRequest ClientEnteringRequest::enteringrequest() const {
  // @@protoc_insertion_point(field_get:serverMessageSystem.ClientEnteringRequest.enteringRequest)
  return static_cast< ::serverMessageSystem::GameCreationRequest >(enteringrequest_);
}
inline void ClientEnteringRequest::set_enteringrequest(::serverMessageSystem::GameCreationRequest value) {
  
  enteringrequest_ = value;
  // @@protoc_insertion_point(field_set:serverMessageSystem.ClientEnteringRequest.enteringRequest)
}

// .serverMessageSystem.GameType gameType = 4;
inline bool ClientEnteringRequest::has_gametype() const {
  return this != internal_default_instance() && gametype_ != NULL;
}
inline void ClientEnteringRequest::clear_gametype() {
  if (GetArenaNoVirtual() == NULL && gametype_ != NULL) {
    delete gametype_;
  }
  gametype_ = NULL;
}
inline const ::serverMessageSystem::GameType& ClientEnteringRequest::_internal_gametype() const {
  return *gametype_;
}
inline const ::serverMessageSystem::GameType& ClientEnteringRequest::gametype() const {
  const ::serverMessageSystem::GameType* p = gametype_;
  // @@protoc_insertion_point(field_get:serverMessageSystem.ClientEnteringRequest.gameType)
  return p != NULL ? *p : *reinterpret_cast<const ::serverMessageSystem::GameType*>(
      &::serverMessageSystem::_GameType_default_instance_);
}
inline ::serverMessageSystem::GameType* ClientEnteringRequest::release_gametype() {
  // @@protoc_insertion_point(field_release:serverMessageSystem.ClientEnteringRequest.gameType)
  
  ::serverMessageSystem::GameType* temp = gametype_;
  gametype_ = NULL;
  return temp;
}
inline ::serverMessageSystem::GameType* ClientEnteringRequest::mutable_gametype() {
  
  if (gametype_ == NULL) {
    auto* p = CreateMaybeMessage<::serverMessageSystem::GameType>(GetArenaNoVirtual());
    gametype_ = p;
  }
  // @@protoc_insertion_point(field_mutable:serverMessageSystem.ClientEnteringRequest.gameType)
  return gametype_;
}
inline void ClientEnteringRequest::set_allocated_gametype(::serverMessageSystem::GameType* gametype) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gametype_;
  }
  if (gametype) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gametype = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gametype, submessage_arena);
    }
    
  } else {
    
  }
  gametype_ = gametype;
  // @@protoc_insertion_point(field_set_allocated:serverMessageSystem.ClientEnteringRequest.gameType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serverMessageSystem

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::serverMessageSystem::RulesType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::serverMessageSystem::RulesType>() {
  return ::serverMessageSystem::RulesType_descriptor();
}
template <> struct is_proto_enum< ::serverMessageSystem::GameCreationRequest> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::serverMessageSystem::GameCreationRequest>() {
  return ::serverMessageSystem::GameCreationRequest_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_serverMessageSystem_2eproto
