syntax = "proto3";
package serverMessageSystem;


//---------------------------------
//Definitions and constants
//---------------------------------

//Rules type - only two for now
enum RulesType
{
    Automatic = 0; //standard
    Manual = 1; //hard-mode. To be developed later.
}

//Subsystem IDs
enum SubSystemID
{
    CONNECTION_SUBSYSTEM = 0;
    GAME_ACTIONS_SUBSYSTEM = 1;
    GAME_NOTIFICATION_SUBSYSTEM = 2;
    CHART_SUBSYSTEM = 3;
}

// Connection Subsystem Commands
enum ConnectionSubSysCommandsID
{
    SERVER_INPUT_QUERY_REQUEST = 0;
    SERVER_INPUT_QUERY_REPLY = 1;
    CLIENT_ROOM_CREATION_REQUEST = 2;
    CLIENT_ROOM_CREATION_REPLY = 3;
    CLIENT_CONNECTION_TO_ROOM_REQUEST = 4;
    CLIENT_CONNECTION_TO_ROOM_REPLY = 5;
    SERVER_REPORTS_OPPONENT_IS_ENTERING_ROOM = 6;
}

enum ChartSubSysCommandsID
{
    CHART_MESSAGE = 0;
    CHART_NOTIFICATION = 1;  //GameServer will notify All about it.
                             //De-facto: The same structure as the message.
                             //For Future use only.
}

//Message to be included to each and every message for it to be detected trhu
//all the others.
//Contains SubSystem ID which is unique through all the SubSystems
//Contains message ID which is unique through all the messages in the SubSystem
message CommonHeader
{
    SubSystemID subSystem = 1;
    uint32      commandId = 2;
}

//GameTimers Constraints. Might be modified later.
message TimeSettings
{
    uint32 totalTimeToMove = 1;
    uint32 timeToThink = 2;
    uint32 timeForOpponentsDecision = 3;
    uint32 diplomacyTime = 4;
}

//Game Addons and Rules types. Actually, in the first Release
//Will not be used.
message GameType
{
    bool hasAddonWildAxe = 1;
    bool hasAddonClericalErrors = 2;
    RulesType rulesType = 3;
}

//SubMessage for GameSettings
message GameSettings
{
    GameType gameType = 1;
    TimeSettings timeSettings = 2;
    uint32  maximumNumberOfPlayers = 3;
    bool    settingsCorrectionAllowed = 4;
}

//Initial Request Type
//Might not be used, if I'd prefer to send two different messages
//instead of common Entering Request.
enum GameCreationRequest
{
    JoinTheGame = 0;
    CreateTheGame = 1;
}

message RoomCreationErrors
{
    bool noFreeSlotsAvailable = 1;
    bool rulesAreNotSupported = 2;
    bool incorrectSettings = 3;
}

//#1 Idea: Check whether server is ready to work...
message ServerInputQuery
{
    CommonHeader header = 1;                        //allways included
    ConnectionSubSysCommandsID connectionCmdID = 2; //command ID
    string clientName = 3;                          //client Name (may be useful to show pending requests)
    string OsType = 4;                              //OsType - type of Operation System. MAy be useful. Not sure when.
}

//#2 Idea: SomeKind of Pinging for Life reply.
//Server will show it's opportunities.
message ServerQueryReply
{
    CommonHeader header = 1;                        //allways included
    ConnectionSubSysCommandsID connectionCmdID = 2; //command ID
    bool roomCreationAllowed = 3;                   //to enable respected Button in GUI
    bool connectionToRoomAllowed = 4;               //to enable respected Button in GUI
    string serverName = 5;                          //Server Name may be used to show some stats...
}

//#3 Room Creation Request
message ClientRoomCreationRequest
{
    CommonHeader header = 1;                        //allways included
    ConnectionSubSysCommandsID connectionCmdID = 2; //command ID
    string clientName = 3;
    GameSettings gameSettings = 4;
}

//#4 Room Creation Reply
message ClientRoomCreationReply
{
    CommonHeader header = 1;                        //allways included
    ConnectionSubSysCommandsID connectionCmdID = 2; //command ID
    bool connectionAllowed = 3;                     //check
    uint32 slotID = 4;                              //to identify the slot's number
    uint32 freeSlotsLeft = 5;                       //how many slots left
    RoomCreationErrors roomCreationErrors = 6;      //to identify the Error
}

//#5 Connection to Room Request
message ClientConnectionToRoomRequest
{
    CommonHeader header = 1;                        //allways included
    ConnectionSubSysCommandsID connectionCmdID = 2; //command ID
    string clientName = 3;                          //identify Client (may be not necessary, up to decide later)
    bool connectToAnyRoom = 4;                      //now allways to set this
    bool agreeToWait = 5;                           //now allways set this. Later to provide user an opportunity to wait
                                                    //in menu mode.
//    GameSettings gameSettings = 6;                //later to apply such a filter by settings
}

//#6
message ClientConnectionToRoomReply
{
    CommonHeader header = 1;                        //allways included
    ConnectionSubSysCommandsID connectionCmdID = 2; //command ID
    bool noRoomsAvailable = 3;                      //if no Rooms Available, set thi field
    uint32 freeSlotsLeft = 4;                       //how many free Slots are left
    repeated uint32 roomID = 5;                     //how many Rooms IDs are provided
    uint32 queryOrder = 6;                          //place in order
}

//#7
message ServerQueryOrderNotification
{
    CommonHeader header = 1;                        //allways included
    ConnectionSubSysCommandsID connectionCmdID = 2; //command ID
    uint32 queryOrder = 3;                          //place in order
}

//#8
message ServerReportsOpponentIsEnteringRoom
{
    CommonHeader header = 1;
    ConnectionSubSysCommandsID connectionCmdID = 2;
    string opponentName = 3;
    uint32 roomID = 4;                              //exactly the same as the SlotID in the ClientRoomCreationReply
}


//#9
message ChartMessage
{
    CommonHeader header = 1;
    ChartSubSysCommandsID chartCmdID = 2;
    string senderName = 3;                  //opponent's or client's name de-facto
    string chartMessage = 4;
    uint32 roomID = 5;
}

//#10 - Historically
message DefaultMessage //Used for message-type distinguish cast.
{
    CommonHeader header = 1;
    ChartSubSysCommandsID chartCmdID = 2;
}


